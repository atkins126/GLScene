// CodeGear C++Builder
// Copyright (c) 1995, 2024 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'GXS.OpenGLAdapter.pas' rev: 36.00 (Windows)

#ifndef GXS_OpenGLAdapterHPP
#define GXS_OpenGLAdapterHPP

#pragma delphiheader begin
#pragma option push
#if defined(__BORLANDC__) && !defined(__clang__)
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#endif
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <Winapi.OpenGL.hpp>
#include <Winapi.OpenGLext.hpp>
#include <Winapi.Windows.hpp>
#include <System.SysUtils.hpp>
#include <Stage.OpenGLTokens.hpp>
#include <Stage.Strings.hpp>
#include <Stage.Logger.hpp>
#include <Stage.VectorGeometry.hpp>
#include <Stage.VectorTypes.hpp>

//-- user supplied -----------------------------------------------------------

namespace Gxs
{
namespace Opengladapter
{
//-- forward type declarations -----------------------------------------------
class DELPHICLASS EOpenGLError;
class DELPHICLASS TGLExtensionsAndEntryPoints;
//-- type declarations -------------------------------------------------------
class PASCALIMPLEMENTATION EOpenGLError : public System::Sysutils::Exception
{
	typedef System::Sysutils::Exception inherited;
	
public:
	/* Exception.Create */ inline __fastcall EOpenGLError(const System::UnicodeString Msg) : System::Sysutils::Exception(Msg) { }
	/* Exception.CreateFmt */ inline __fastcall EOpenGLError(const System::UnicodeString Msg, const System::TVarRec *Args, const System::NativeInt Args_High) : System::Sysutils::Exception(Msg, Args, Args_High) { }
	/* Exception.CreateRes */ inline __fastcall EOpenGLError(System::NativeUInt Ident)/* overload */ : System::Sysutils::Exception(Ident) { }
	/* Exception.CreateRes */ inline __fastcall EOpenGLError(System::PResStringRec ResStringRec)/* overload */ : System::Sysutils::Exception(ResStringRec) { }
	/* Exception.CreateResFmt */ inline __fastcall EOpenGLError(System::NativeUInt Ident, const System::TVarRec *Args, const System::NativeInt Args_High)/* overload */ : System::Sysutils::Exception(Ident, Args, Args_High) { }
	/* Exception.CreateResFmt */ inline __fastcall EOpenGLError(System::PResStringRec ResStringRec, const System::TVarRec *Args, const System::NativeInt Args_High)/* overload */ : System::Sysutils::Exception(ResStringRec, Args, Args_High) { }
	/* Exception.CreateHelp */ inline __fastcall EOpenGLError(const System::UnicodeString Msg, int AHelpContext) : System::Sysutils::Exception(Msg, AHelpContext) { }
	/* Exception.CreateFmtHelp */ inline __fastcall EOpenGLError(const System::UnicodeString Msg, const System::TVarRec *Args, const System::NativeInt Args_High, int AHelpContext) : System::Sysutils::Exception(Msg, Args, Args_High, AHelpContext) { }
	/* Exception.CreateResHelp */ inline __fastcall EOpenGLError(System::NativeUInt Ident, int AHelpContext)/* overload */ : System::Sysutils::Exception(Ident, AHelpContext) { }
	/* Exception.CreateResHelp */ inline __fastcall EOpenGLError(System::PResStringRec ResStringRec, int AHelpContext)/* overload */ : System::Sysutils::Exception(ResStringRec, AHelpContext) { }
	/* Exception.CreateResFmtHelp */ inline __fastcall EOpenGLError(System::PResStringRec ResStringRec, const System::TVarRec *Args, const System::NativeInt Args_High, int AHelpContext)/* overload */ : System::Sysutils::Exception(ResStringRec, Args, Args_High, AHelpContext) { }
	/* Exception.CreateResFmtHelp */ inline __fastcall EOpenGLError(System::NativeUInt Ident, const System::TVarRec *Args, const System::NativeInt Args_High, int AHelpContext)/* overload */ : System::Sysutils::Exception(Ident, Args, Args_High, AHelpContext) { }
	/* Exception.Destroy */ inline __fastcall virtual ~EOpenGLError() { }
	
};


class PASCALIMPLEMENTATION TGLExtensionsAndEntryPoints : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	System::UnicodeString FBuffer;
	bool FInitialized;
	bool FDebug;
	unsigned FDebugIds;
	bool __fastcall CheckExtension(const System::UnicodeString Extension);
	void __fastcall ReadWGLExtensions();
	void __fastcall ReadWGLImplementationProperties();
	void * __fastcall GetAddress(const System::UnicodeString ProcName);
	void * __fastcall GetAddressNoSuffixes(const System::UnicodeString ProcName);
	void * __fastcall GetAddressAlt(const System::UnicodeString ProcName1, const System::UnicodeString ProcName2);
	void * __fastcall GetCapAddress();
	
public:
	bool VERSION_1_0;
	bool VERSION_1_1;
	bool VERSION_1_2;
	bool VERSION_1_3;
	bool VERSION_1_4;
	bool VERSION_1_5;
	bool VERSION_2_0;
	bool VERSION_2_1;
	bool VERSION_3_0;
	bool VERSION_3_1;
	bool VERSION_3_2;
	bool VERSION_3_3;
	bool VERSION_4_0;
	bool VERSION_4_1;
	bool VERSION_4_2;
	bool ARB_blend_func_extended;
	bool ARB_color_buffer_float;
	bool ARB_compatibility;
	bool ARB_copy_buffer;
	bool ARB_depth_buffer_float;
	bool ARB_depth_clamp;
	bool ARB_depth_texture;
	bool ARB_draw_buffers;
	bool ARB_draw_buffers_blend;
	bool ARB_draw_elements_base_vertex;
	bool ARB_draw_indirect;
	bool ARB_draw_instanced;
	bool ARB_explicit_attrib_location;
	bool ARB_fragment_coord_conventions;
	bool ARB_fragment_program;
	bool ARB_fragment_program_shadow;
	bool ARB_fragment_shader;
	bool ARB_framebuffer_object;
	bool ARB_framebuffer_sRGB;
	bool ARB_geometry_shader4;
	bool ARB_gpu_shader_fp64;
	bool ARB_gpu_shader5;
	bool ARB_half_float_pixel;
	bool ARB_half_float_vertex;
	bool ARB_imaging;
	bool ARB_instanced_arrays;
	bool ARB_map_buffer_range;
	bool ARB_matrix_palette;
	bool ARB_multisample;
	bool ARB_multitexture;
	bool ARB_occlusion_query;
	bool ARB_occlusion_query2;
	bool ARB_pixel_buffer_object;
	bool ARB_point_parameters;
	bool ARB_point_sprite;
	bool ARB_provoking_vertex;
	bool ARB_sample_shading;
	bool ARB_sampler_objects;
	bool ARB_seamless_cube_map;
	bool ARB_shader_bit_encoding;
	bool ARB_shader_subroutine;
	bool ARB_shader_texture_lod;
	bool ARB_shading_language_100;
	bool ARB_shadow;
	bool ARB_shadow_ambient;
	bool ARB_shader_objects;
	bool ARB_sync;
	bool ARB_tessellation_shader;
	bool ARB_texture_border_clamp;
	bool ARB_texture_buffer_object;
	bool ARB_texture_buffer_object_rgb32;
	bool ARB_texture_compression;
	bool ARB_texture_compression_rgtc;
	bool ARB_texture_cube_map;
	bool ARB_texture_cube_map_array;
	bool ARB_texture_env_add;
	bool ARB_texture_env_combine;
	bool ARB_texture_env_crossbar;
	bool ARB_texture_env_dot3;
	bool ARB_texture_float;
	bool ARB_texture_gather;
	bool ARB_texture_mirrored_repeat;
	bool ARB_texture_multisample;
	bool ARB_texture_non_power_of_two;
	bool ARB_texture_query_lod;
	bool ARB_texture_rectangle;
	bool ARB_texture_rg;
	bool ARB_texture_rgb10_a2ui;
	bool ARB_texture_swizzle;
	bool ARB_timer_query;
	bool ARB_transform_feedback2;
	bool ARB_transform_feedback3;
	bool ARB_transpose_matrix;
	bool ARB_uniform_buffer_object;
	bool ARB_vertex_array_bgra;
	bool ARB_vertex_array_object;
	bool ARB_vertex_blend;
	bool ARB_vertex_buffer_object;
	bool ARB_vertex_program;
	bool ARB_vertex_shader;
	bool ARB_vertex_type_2_10_10_10_rev;
	bool ARB_window_pos;
	bool ARB_texture_compression_bptc;
	bool ARB_get_program_binary;
	bool ARB_separate_shader_objects;
	bool ARB_shader_stencil_export;
	bool KHR_debug;
	bool ARB_clear_buffer_object;
	bool ARB_compute_shader;
	bool ARB_copy_image;
	bool ARB_debug_group;
	bool ARB_debug_label;
	bool ARB_debug_output2;
	bool ARB_ES3_compatibility;
	bool ARB_explicit_uniform_location;
	bool ARB_fragment_layer_viewport;
	bool ARB_framebuffer_no_attachments;
	bool ARB_internalformat_query2;
	bool ARB_invalidate_subdata;
	bool ARB_multi_draw_indirect;
	bool ARB_program_interface_query;
	bool ARB_shader_image_size;
	bool ARB_shader_storage_buffer_object;
	bool ARB_stencil_texturing;
	bool ARB_texture_buffer_range;
	bool ARB_texture_query_levels;
	bool ARB_texture_storage_multisample;
	bool ARB_texture_view;
	bool ARB_vertex_attrib_binding;
	bool ARB_robustness_isolation;
	bool ARB_cl_event;
	bool _3DFX_multisample;
	bool _3DFX_tbuffer;
	bool _3DFX_texture_compression_FXT1;
	bool ATI_draw_buffers;
	bool ATI_texture_compression_3dc;
	bool ATI_texture_float;
	bool ATI_texture_mirror_once;
	bool S3_s3tc;
	bool EXT_abgr;
	bool EXT_bgra;
	bool EXT_bindable_uniform;
	bool EXT_blend_color;
	bool EXT_blend_equation_separate;
	bool EXT_blend_func_separate;
	bool EXT_blend_logic_op;
	bool EXT_blend_minmax;
	bool EXT_blend_subtract;
	bool EXT_Cg_shader;
	bool EXT_clip_volume_hint;
	bool EXT_compiled_vertex_array;
	bool EXT_copy_texture;
	bool EXT_depth_bounds_test;
	bool EXT_draw_buffers2;
	bool EXT_draw_instanced;
	bool EXT_draw_range_elements;
	bool EXT_fog_coord;
	bool EXT_framebuffer_blit;
	bool EXT_framebuffer_multisample;
	bool EXT_framebuffer_object;
	bool EXT_framebuffer_sRGB;
	bool EXT_geometry_shader4;
	bool EXT_gpu_program_parameters;
	bool EXT_gpu_shader4;
	bool EXT_multi_draw_arrays;
	bool EXT_multisample;
	bool EXT_packed_depth_stencil;
	bool EXT_packed_float;
	bool EXT_packed_pixels;
	bool EXT_paletted_texture;
	bool EXT_pixel_buffer_object;
	bool EXT_polygon_offset;
	bool EXT_rescale_normal;
	bool EXT_secondary_color;
	bool EXT_separate_specular_color;
	bool EXT_shadow_funcs;
	bool EXT_shared_texture_palette;
	bool EXT_stencil_clear_tag;
	bool EXT_stencil_two_side;
	bool EXT_stencil_wrap;
	bool EXT_texture3D;
	bool EXT_texture_array;
	bool EXT_texture_buffer_object;
	bool EXT_texture_compression_latc;
	bool EXT_texture_compression_rgtc;
	bool EXT_texture_compression_s3tc;
	bool EXT_texture_cube_map;
	bool EXT_texture_edge_clamp;
	bool EXT_texture_env_add;
	bool EXT_texture_env_combine;
	bool EXT_texture_env_dot3;
	bool EXT_texture_filter_anisotropic;
	bool EXT_texture_integer;
	bool EXT_texture_lod;
	bool EXT_texture_lod_bias;
	bool EXT_texture_mirror_clamp;
	bool EXT_texture_object;
	bool EXT_texture_rectangle;
	bool EXT_texture_sRGB;
	bool EXT_texture_shared_exponent;
	bool EXT_timer_query;
	bool EXT_transform_feedback;
	bool EXT_vertex_array;
	bool EXT_texture_sRGB_decode;
	bool EXT_direct_state_access;
	bool EXT_texture_swizzle;
	bool HP_occlusion_test;
	bool IBM_rasterpos_clip;
	bool KTX_buffer_region;
	bool MESA_resize_buffers;
	bool NV_blend_square;
	bool NV_conditional_render;
	bool NV_copy_image;
	bool NV_depth_buffer_float;
	bool NV_fence;
	bool NV_float_buffer;
	bool NV_fog_distance;
	bool NV_geometry_program4;
	bool NV_light_max_exponent;
	bool NV_multisample_filter_hint;
	bool NV_occlusion_query;
	bool NV_point_sprite;
	bool NV_primitive_restart;
	bool NV_register_combiners;
	bool NV_shader_buffer_load;
	bool NV_texgen_reflection;
	bool NV_texture_compression_vtc;
	bool NV_texture_env_combine4;
	bool NV_texture_rectangle;
	bool NV_texture_shader;
	bool NV_texture_shader2;
	bool NV_texture_shader3;
	bool NV_transform_feedback;
	bool NV_vertex_array_range;
	bool NV_vertex_array_range2;
	bool NV_vertex_buffer_unified_memory;
	bool NV_vertex_program;
	bool SGI_color_matrix;
	bool SGIS_generate_mipmap;
	bool SGIS_multisample;
	bool SGIS_texture_border_clamp;
	bool SGIS_texture_color_mask;
	bool SGIS_texture_edge_clamp;
	bool SGIS_texture_lod;
	bool SGIX_depth_texture;
	bool SGIX_shadow;
	bool SGIX_shadow_ambient;
	bool AMD_vertex_shader_tessellator;
	bool WIN_swap_hint;
	bool ATI_meminfo;
	bool NVX_gpu_memory_info;
	bool NV_vdpau_interop;
	bool NV_path_rendering;
	bool GREMEDY_frame_terminator;
	bool GREMEDY_string_marker;
	bool AMDX_debug_output;
	bool ARB_debug_output;
	void __stdcall (*BindTexture)(unsigned target, unsigned texture);
	void __stdcall (*BlendFunc)(unsigned sfactor, unsigned dfactor);
	void __stdcall (*Clear)(Stage::Opengltokens::TGLbitfield mask);
	void __stdcall (*ClearColor)(float red, float green, float blue, float alpha);
	void __stdcall (*ClearDepth)(Stage::Opengltokens::TGLclampd depth);
	void __stdcall (*ClearStencil)(Stage::Opengltokens::TGLint s);
	void __stdcall (*ColorMask)(Stage::Opengltokens::TGLboolean red, Stage::Opengltokens::TGLboolean green, Stage::Opengltokens::TGLboolean blue, Stage::Opengltokens::TGLboolean alpha);
	void __stdcall (*CopyTexImage1D)(unsigned target, Stage::Opengltokens::TGLint level, unsigned internalFormat, Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y, Stage::Opengltokens::TGLsizei Width, Stage::Opengltokens::TGLint border);
	void __stdcall (*CopyTexImage2D)(unsigned target, Stage::Opengltokens::TGLint level, unsigned internalFormat, Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y, Stage::Opengltokens::TGLsizei Width, Stage::Opengltokens::TGLsizei Height, Stage::Opengltokens::TGLint border);
	void __stdcall (*CopyTexSubImage1D)(unsigned target, Stage::Opengltokens::TGLint level, Stage::Opengltokens::TGLint xoffset, Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y, Stage::Opengltokens::TGLsizei Width);
	void __stdcall (*CopyTexSubImage2D)(unsigned target, Stage::Opengltokens::TGLint level, Stage::Opengltokens::TGLint xoffset, Stage::Opengltokens::TGLint yoffset, Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y, Stage::Opengltokens::TGLsizei Width, Stage::Opengltokens::TGLsizei Height);
	void __stdcall (*CullFace)(unsigned mode);
	void __stdcall (*DeleteTextures)(Stage::Opengltokens::TGLsizei n, Stage::Opengltokens::PGLuint textures);
	void __stdcall (*DepthFunc)(unsigned func);
	void __stdcall (*DepthMask)(Stage::Opengltokens::TGLboolean flag);
	void __stdcall (*DepthRange)(Stage::Opengltokens::TGLclampd zNear, Stage::Opengltokens::TGLclampd zFar);
	void __stdcall (*Disable)(unsigned cap);
	void __stdcall (*DrawArrays)(unsigned mode, Stage::Opengltokens::TGLint First, Stage::Opengltokens::TGLsizei Count);
	void __stdcall (*DrawBuffer)(unsigned mode);
	void __stdcall (*DrawElements)(unsigned mode, Stage::Opengltokens::TGLsizei Count, unsigned atype, void * indices);
	void __stdcall (*Enable)(unsigned cap);
	void __stdcall (*Finish)(void);
	void __stdcall (*Flush)(void);
	void __stdcall (*FrontFace)(unsigned mode);
	void __stdcall (*GenTextures)(Stage::Opengltokens::TGLsizei n, Stage::Opengltokens::PGLuint textures);
	void __stdcall (*GetBooleanv)(unsigned pname, Stage::Opengltokens::PGLboolean params);
	void __stdcall (*GetDoublev)(unsigned pname, Stage::Opengltokens::PGLdouble params);
	unsigned __stdcall (*GetError)(void);
	void __stdcall (*GetFloatv)(unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*GetIntegerv)(unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*GetPointerv)(unsigned pname, void *params);
	char * __stdcall (*GetString)(unsigned Name);
	void __stdcall (*GetTexImage)(unsigned target, Stage::Opengltokens::TGLint level, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*GetTexLevelParameterfv)(unsigned target, Stage::Opengltokens::TGLint level, unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*GetTexLevelParameteriv)(unsigned target, Stage::Opengltokens::TGLint level, unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*GetTexParameterfv)(unsigned target, unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*GetTexParameteriv)(unsigned target, unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*Hint)(unsigned target, unsigned mode);
	System::ByteBool __stdcall (*IsEnabled)(unsigned cap);
	System::ByteBool __stdcall (*IsTexture)(unsigned texture);
	void __stdcall (*LineWidth)(Stage::Opengltokens::TGLfloat Width);
	void __stdcall (*LogicOp)(unsigned opcode);
	void __stdcall (*PixelStoref)(unsigned pname, Stage::Opengltokens::TGLfloat param);
	void __stdcall (*PixelStorei)(unsigned pname, Stage::Opengltokens::TGLint param);
	void __stdcall (*PointSize)(Stage::Opengltokens::TGLfloat size);
	void __stdcall (*PolygonMode)(unsigned face, unsigned mode);
	void __stdcall (*PolygonOffset)(Stage::Opengltokens::TGLfloat factor, Stage::Opengltokens::TGLfloat units);
	void __stdcall (*ReadBuffer)(unsigned mode);
	void __stdcall (*ReadPixels)(Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y, Stage::Opengltokens::TGLsizei Width, Stage::Opengltokens::TGLsizei Height, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*Scissor)(Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y, Stage::Opengltokens::TGLsizei Width, Stage::Opengltokens::TGLsizei Height);
	void __stdcall (*StencilFunc)(unsigned func, Stage::Opengltokens::TGLint ref, unsigned mask);
	void __stdcall (*StencilMask)(unsigned mask);
	void __stdcall (*StencilOp)(unsigned fail, unsigned zfail, unsigned zpass);
	void __stdcall (*TexImage1D)(unsigned target, Stage::Opengltokens::TGLint level, Stage::Opengltokens::TGLint internalFormat, Stage::Opengltokens::TGLsizei Width, Stage::Opengltokens::TGLint border, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*TexImage2D)(unsigned target, Stage::Opengltokens::TGLint level, Stage::Opengltokens::TGLint internalFormat, Stage::Opengltokens::TGLsizei Width, Stage::Opengltokens::TGLsizei Height, Stage::Opengltokens::TGLint border, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*TexParameterf)(unsigned target, unsigned pname, Stage::Opengltokens::TGLfloat param);
	void __stdcall (*TexParameterfv)(unsigned target, unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*TexParameteri)(unsigned target, unsigned pname, Stage::Opengltokens::TGLint param);
	void __stdcall (*TexParameteriv)(unsigned target, unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*TexSubImage1D)(unsigned target, Stage::Opengltokens::TGLint level, Stage::Opengltokens::TGLint xoffset, Stage::Opengltokens::TGLsizei Width, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*TexSubImage2D)(unsigned target, Stage::Opengltokens::TGLint level, Stage::Opengltokens::TGLint xoffset, Stage::Opengltokens::TGLint yoffset, Stage::Opengltokens::TGLsizei Width, Stage::Opengltokens::TGLsizei Height, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*Viewport)(Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y, Stage::Opengltokens::TGLsizei Width, Stage::Opengltokens::TGLsizei Height);
	void __stdcall (*Accum)(unsigned op, Stage::Opengltokens::TGLfloat Value);
	void __stdcall (*AlphaFunc)(unsigned func, float ref);
	System::ByteBool __stdcall (*AreTexturesResident)(Stage::Opengltokens::TGLsizei n, Stage::Opengltokens::PGLuint textures, Stage::Opengltokens::PGLboolean residences);
	void __stdcall (*ArrayElement)(Stage::Opengltokens::TGLint i);
	void __stdcall (*Begin_)(unsigned mode);
	void __stdcall (*Bitmap)(Stage::Opengltokens::TGLsizei Width, Stage::Opengltokens::TGLsizei Height, Stage::Opengltokens::TGLfloat xorig, Stage::Opengltokens::TGLfloat yorig, Stage::Opengltokens::TGLfloat xmove, Stage::Opengltokens::TGLfloat ymove, void * Bitmap);
	void __stdcall (*CallList)(unsigned list);
	void __stdcall (*CallLists)(Stage::Opengltokens::TGLsizei n, unsigned atype, void * lists);
	void __stdcall (*ClearAccum)(Stage::Opengltokens::TGLfloat red, Stage::Opengltokens::TGLfloat green, Stage::Opengltokens::TGLfloat blue, Stage::Opengltokens::TGLfloat alpha);
	void __stdcall (*ClearIndex)(Stage::Opengltokens::TGLfloat c);
	void __stdcall (*ClipPlane)(unsigned plane, Stage::Opengltokens::PGLdouble equation);
	void __stdcall (*Color3b)(Stage::Opengltokens::TGLbyte red, Stage::Opengltokens::TGLbyte green, Stage::Opengltokens::TGLbyte blue);
	void __stdcall (*Color3bv)(Stage::Opengltokens::PGLbyte v);
	void __stdcall (*Color3d)(Stage::Opengltokens::TGLdouble red, Stage::Opengltokens::TGLdouble green, Stage::Opengltokens::TGLdouble blue);
	void __stdcall (*Color3dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*Color3f)(Stage::Opengltokens::TGLfloat red, Stage::Opengltokens::TGLfloat green, Stage::Opengltokens::TGLfloat blue);
	void __stdcall (*Color3fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*Color3i)(Stage::Opengltokens::TGLint red, Stage::Opengltokens::TGLint green, Stage::Opengltokens::TGLint blue);
	void __stdcall (*Color3iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*Color3s)(Stage::Opengltokens::TGLshort red, Stage::Opengltokens::TGLshort green, Stage::Opengltokens::TGLshort blue);
	void __stdcall (*Color3sv)(Stage::Opengltokens::PGLshort v);
	void __stdcall (*Color3ub)(Stage::Opengltokens::TGLubyte red, Stage::Opengltokens::TGLubyte green, Stage::Opengltokens::TGLubyte blue);
	void __stdcall (*Color3ubv)(Stage::Opengltokens::PGLubyte v);
	void __stdcall (*Color3ui)(unsigned red, unsigned green, unsigned blue);
	void __stdcall (*Color3uiv)(Stage::Opengltokens::PGLuint v);
	void __stdcall (*Color3us)(Stage::Opengltokens::TGLushort red, Stage::Opengltokens::TGLushort green, Stage::Opengltokens::TGLushort blue);
	void __stdcall (*Color3usv)(Stage::Opengltokens::PGLushort v);
	void __stdcall (*Color4b)(Stage::Opengltokens::TGLbyte red, Stage::Opengltokens::TGLbyte green, Stage::Opengltokens::TGLbyte blue, Stage::Opengltokens::TGLbyte alpha);
	void __stdcall (*Color4bv)(Stage::Opengltokens::PGLbyte v);
	void __stdcall (*Color4d)(Stage::Opengltokens::TGLdouble red, Stage::Opengltokens::TGLdouble green, Stage::Opengltokens::TGLdouble blue, Stage::Opengltokens::TGLdouble alpha);
	void __stdcall (*Color4dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*Color4f)(Stage::Opengltokens::TGLfloat red, Stage::Opengltokens::TGLfloat green, Stage::Opengltokens::TGLfloat blue, Stage::Opengltokens::TGLfloat alpha);
	void __stdcall (*Color4fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*Color4i)(Stage::Opengltokens::TGLint red, Stage::Opengltokens::TGLint green, Stage::Opengltokens::TGLint blue, Stage::Opengltokens::TGLint alpha);
	void __stdcall (*Color4iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*Color4s)(Stage::Opengltokens::TGLshort red, Stage::Opengltokens::TGLshort green, Stage::Opengltokens::TGLshort blue, Stage::Opengltokens::TGLshort alpha);
	void __stdcall (*Color4sv)(Stage::Opengltokens::TGLshort v);
	void __stdcall (*Color4ub)(Stage::Opengltokens::TGLubyte red, Stage::Opengltokens::TGLubyte green, Stage::Opengltokens::TGLubyte blue, Stage::Opengltokens::TGLubyte alpha);
	void __stdcall (*Color4ubv)(Stage::Opengltokens::PGLubyte v);
	void __stdcall (*Color4ui)(unsigned red, unsigned green, unsigned blue, unsigned alpha);
	void __stdcall (*Color4uiv)(Stage::Opengltokens::PGLuint v);
	void __stdcall (*Color4us)(Stage::Opengltokens::TGLushort red, Stage::Opengltokens::TGLushort green, Stage::Opengltokens::TGLushort blue, Stage::Opengltokens::TGLushort alpha);
	void __stdcall (*Color4usv)(Stage::Opengltokens::PGLushort v);
	void __stdcall (*ColorMaterial)(unsigned face, unsigned mode);
	void __stdcall (*ColorPointer)(Stage::Opengltokens::TGLint size, unsigned atype, Stage::Opengltokens::TGLsizei stride, void * Data);
	void __stdcall (*CopyPixels)(Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y, Stage::Opengltokens::TGLsizei Width, Stage::Opengltokens::TGLsizei Height, unsigned atype);
	void __stdcall (*DeleteLists)(unsigned list, Stage::Opengltokens::TGLsizei range);
	void __stdcall (*DisableClientState)(unsigned aarray);
	void __stdcall (*DrawPixels)(Stage::Opengltokens::TGLsizei Width, Stage::Opengltokens::TGLsizei Height, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*EdgeFlag)(Stage::Opengltokens::TGLboolean flag);
	void __stdcall (*EdgeFlagPointer)(Stage::Opengltokens::TGLsizei stride, void * Data);
	void __stdcall (*EdgeFlagv)(Stage::Opengltokens::PGLboolean flag);
	void __stdcall (*EnableClientState)(unsigned aarray);
	void __stdcall (*End_)(void);
	void __stdcall (*EndList)(void);
	void __stdcall (*EvalCoord1d)(Stage::Opengltokens::TGLdouble u);
	void __stdcall (*EvalCoord1dv)(Stage::Opengltokens::PGLdouble u);
	void __stdcall (*EvalCoord1f)(Stage::Opengltokens::TGLfloat u);
	void __stdcall (*EvalCoord1fv)(Stage::Opengltokens::PGLfloat u);
	void __stdcall (*EvalCoord2d)(Stage::Opengltokens::TGLdouble u, Stage::Opengltokens::TGLdouble v);
	void __stdcall (*EvalCoord2dv)(Stage::Opengltokens::PGLdouble u);
	void __stdcall (*EvalCoord2f)(Stage::Opengltokens::TGLfloat u, Stage::Opengltokens::TGLfloat v);
	void __stdcall (*EvalCoord2fv)(Stage::Opengltokens::PGLfloat u);
	void __stdcall (*EvalMesh1)(unsigned mode, Stage::Opengltokens::TGLint i1, Stage::Opengltokens::TGLint i2);
	void __stdcall (*EvalMesh2)(unsigned mode, Stage::Opengltokens::TGLint i1, Stage::Opengltokens::TGLint i2, Stage::Opengltokens::TGLint j1, Stage::Opengltokens::TGLint j2);
	void __stdcall (*EvalPoint1)(Stage::Opengltokens::TGLint i);
	void __stdcall (*EvalPoint2)(Stage::Opengltokens::TGLint i, Stage::Opengltokens::TGLint j);
	void __stdcall (*FeedbackBuffer)(Stage::Opengltokens::TGLsizei size, unsigned atype, Stage::Opengltokens::PGLfloat buffer);
	void __stdcall (*Fogf)(unsigned pname, Stage::Opengltokens::TGLfloat param);
	void __stdcall (*Fogfv)(unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*Fogi)(unsigned pname, Stage::Opengltokens::TGLint param);
	void __stdcall (*Fogiv)(unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*Frustum)(Stage::Opengltokens::TGLdouble left, Stage::Opengltokens::TGLdouble right, Stage::Opengltokens::TGLdouble bottom, Stage::Opengltokens::TGLdouble top, Stage::Opengltokens::TGLdouble zNear, Stage::Opengltokens::TGLdouble zFar);
	unsigned __stdcall (*GenLists)(Stage::Opengltokens::TGLsizei range);
	void __stdcall (*GetClipPlane)(unsigned plane, Stage::Opengltokens::PGLdouble equation);
	void __stdcall (*GetLightfv)(unsigned light, unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*GetLightiv)(unsigned light, unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*GetMapdv)(unsigned target, unsigned query, Stage::Opengltokens::PGLdouble v);
	void __stdcall (*GetMapfv)(unsigned target, unsigned query, Stage::Opengltokens::PGLfloat v);
	void __stdcall (*GetMapiv)(unsigned target, unsigned query, Stage::Opengltokens::PGLint v);
	void __stdcall (*GetMaterialfv)(unsigned face, unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*GetMaterialiv)(unsigned face, unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*GetPixelMapfv)(unsigned map, Stage::Opengltokens::PGLfloat values);
	void __stdcall (*GetPixelMapuiv)(unsigned map, Stage::Opengltokens::PGLuint values);
	void __stdcall (*GetPixelMapusv)(unsigned map, Stage::Opengltokens::PGLushort values);
	void __stdcall (*GetPolygonStipple)(Stage::Opengltokens::PGLubyte mask);
	void __stdcall (*GetTexEnvfv)(unsigned target, unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*GetTexEnviv)(unsigned target, unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*GetTexGendv)(unsigned coord, unsigned pname, Stage::Opengltokens::PGLdouble params);
	void __stdcall (*GetTexGenfv)(unsigned coord, unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*GetTexGeniv)(unsigned coord, unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*IndexMask)(unsigned mask);
	void __stdcall (*IndexPointer)(unsigned atype, Stage::Opengltokens::TGLsizei stride, void * Data);
	void __stdcall (*Indexd)(Stage::Opengltokens::TGLdouble c);
	void __stdcall (*Indexdv)(Stage::Opengltokens::PGLdouble c);
	void __stdcall (*Indexf)(Stage::Opengltokens::TGLfloat c);
	void __stdcall (*Indexfv)(Stage::Opengltokens::PGLfloat c);
	void __stdcall (*Indexi)(Stage::Opengltokens::TGLint c);
	void __stdcall (*Indexiv)(Stage::Opengltokens::PGLint c);
	void __stdcall (*Indexs)(Stage::Opengltokens::TGLshort c);
	void __stdcall (*Indexsv)(Stage::Opengltokens::PGLshort c);
	void __stdcall (*Indexub)(Stage::Opengltokens::TGLubyte c);
	void __stdcall (*Indexubv)(Stage::Opengltokens::PGLubyte c);
	void __stdcall (*InitNames)(void);
	void __stdcall (*InterleavedArrays)(unsigned format, Stage::Opengltokens::TGLsizei stride, void * Data);
	System::ByteBool __stdcall (*IsList)(unsigned list);
	void __stdcall (*LightModelf)(unsigned pname, Stage::Opengltokens::TGLfloat param);
	void __stdcall (*LightModelfv)(unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*LightModeli)(unsigned pname, Stage::Opengltokens::TGLint param);
	void __stdcall (*LightModeliv)(unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*Lightf)(unsigned light, unsigned pname, Stage::Opengltokens::TGLfloat param);
	void __stdcall (*Lightfv)(unsigned light, unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*Lighti)(unsigned light, unsigned pname, Stage::Opengltokens::TGLint param);
	void __stdcall (*Lightiv)(unsigned light, unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*LineStipple)(Stage::Opengltokens::TGLint factor, Stage::Opengltokens::TGLushort pattern);
	void __stdcall (*ListBase)(unsigned base);
	void __stdcall (*LoadIdentity)(void);
	void __stdcall (*LoadMatrixd)(Stage::Opengltokens::PGLdouble m);
	void __stdcall (*LoadMatrixf)(Stage::Opengltokens::PGLfloat m);
	void __stdcall (*LoadName)(unsigned Name);
	void __stdcall (*Map1d)(unsigned target, Stage::Opengltokens::TGLdouble u1, Stage::Opengltokens::TGLdouble u2, Stage::Opengltokens::TGLint stride, Stage::Opengltokens::TGLint order, Stage::Opengltokens::PGLdouble points);
	void __stdcall (*Map1f)(unsigned target, Stage::Opengltokens::TGLfloat u1, Stage::Opengltokens::TGLfloat u2, Stage::Opengltokens::TGLint stride, Stage::Opengltokens::TGLint order, Stage::Opengltokens::PGLfloat points);
	void __stdcall (*Map2d)(unsigned target, Stage::Opengltokens::TGLdouble u1, Stage::Opengltokens::TGLdouble u2, Stage::Opengltokens::TGLint ustride, Stage::Opengltokens::TGLint uorder, Stage::Opengltokens::TGLdouble v1, Stage::Opengltokens::TGLdouble v2, Stage::Opengltokens::TGLint vstride, Stage::Opengltokens::TGLint vorder, Stage::Opengltokens::PGLdouble points);
	void __stdcall (*Map2f)(unsigned target, Stage::Opengltokens::TGLfloat u1, Stage::Opengltokens::TGLfloat u2, Stage::Opengltokens::TGLint ustride, Stage::Opengltokens::TGLint uorder, Stage::Opengltokens::TGLfloat v1, Stage::Opengltokens::TGLfloat v2, Stage::Opengltokens::TGLint vstride, Stage::Opengltokens::TGLint vorder, Stage::Opengltokens::PGLfloat points);
	void __stdcall (*MapGrid1d)(Stage::Opengltokens::TGLint un, Stage::Opengltokens::TGLdouble u1, Stage::Opengltokens::TGLdouble u2);
	void __stdcall (*MapGrid1f)(Stage::Opengltokens::TGLint un, Stage::Opengltokens::TGLfloat u1, Stage::Opengltokens::TGLfloat u2);
	void __stdcall (*MapGrid2d)(Stage::Opengltokens::TGLint un, Stage::Opengltokens::TGLdouble u1, Stage::Opengltokens::TGLdouble u2, Stage::Opengltokens::TGLint vn, Stage::Opengltokens::TGLdouble v1, Stage::Opengltokens::TGLdouble v2);
	void __stdcall (*MapGrid2f)(Stage::Opengltokens::TGLint un, Stage::Opengltokens::TGLfloat u1, Stage::Opengltokens::TGLfloat u2, Stage::Opengltokens::TGLint vn, Stage::Opengltokens::TGLfloat v1, Stage::Opengltokens::TGLfloat v2);
	void __stdcall (*Materialf)(unsigned face, unsigned pname, Stage::Opengltokens::TGLfloat param);
	void __stdcall (*Materialfv)(unsigned face, unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*Materiali)(unsigned face, unsigned pname, Stage::Opengltokens::TGLint param);
	void __stdcall (*Materialiv)(unsigned face, unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*MatrixMode)(unsigned mode);
	void __stdcall (*MultMatrixd)(Stage::Opengltokens::PGLdouble m);
	void __stdcall (*MultMatrixf)(Stage::Opengltokens::PGLfloat m);
	void __stdcall (*NewList)(unsigned list, unsigned mode);
	void __stdcall (*Normal3b)(Stage::Opengltokens::TGLbyte nx, Stage::Opengltokens::TGLbyte ny, Stage::Opengltokens::TGLbyte nz);
	void __stdcall (*Normal3bv)(Stage::Opengltokens::PGLbyte v);
	void __stdcall (*Normal3d)(Stage::Opengltokens::TGLdouble nx, Stage::Opengltokens::TGLdouble ny, Stage::Opengltokens::TGLdouble nz);
	void __stdcall (*Normal3dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*Normal3f)(Stage::Opengltokens::TGLfloat nx, Stage::Opengltokens::TGLfloat ny, Stage::Opengltokens::TGLfloat nz);
	void __stdcall (*Normal3fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*Normal3i)(Stage::Opengltokens::TGLint nx, Stage::Opengltokens::TGLint ny, Stage::Opengltokens::TGLint nz);
	void __stdcall (*Normal3iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*Normal3s)(Stage::Opengltokens::TGLshort nx, Stage::Opengltokens::TGLshort ny, Stage::Opengltokens::TGLshort nz);
	void __stdcall (*Normal3sv)(Stage::Opengltokens::PGLshort v);
	void __stdcall (*NormalPointer)(unsigned atype, Stage::Opengltokens::TGLsizei stride, void * Data);
	void __stdcall (*Ortho)(Stage::Opengltokens::TGLdouble left, Stage::Opengltokens::TGLdouble right, Stage::Opengltokens::TGLdouble bottom, Stage::Opengltokens::TGLdouble top, Stage::Opengltokens::TGLdouble zNear, Stage::Opengltokens::TGLdouble zFar);
	void __stdcall (*PassThrough)(Stage::Opengltokens::TGLfloat token);
	void __stdcall (*PixelMapfv)(unsigned map, Stage::Opengltokens::TGLsizei mapsize, Stage::Opengltokens::PGLfloat values);
	void __stdcall (*PixelMapuiv)(unsigned map, Stage::Opengltokens::TGLsizei mapsize, Stage::Opengltokens::PGLuint values);
	void __stdcall (*PixelMapusv)(unsigned map, Stage::Opengltokens::TGLsizei mapsize, Stage::Opengltokens::PGLushort values);
	void __stdcall (*PixelTransferf)(unsigned pname, Stage::Opengltokens::TGLfloat param);
	void __stdcall (*PixelTransferi)(unsigned pname, Stage::Opengltokens::TGLint param);
	void __stdcall (*PixelZoom)(Stage::Opengltokens::TGLfloat xfactor, Stage::Opengltokens::TGLfloat yfactor);
	void __stdcall (*PolygonStipple)(Stage::Opengltokens::PGLubyte mask);
	void __stdcall (*PopAttrib)(void);
	void __stdcall (*PopClientAttrib)(void);
	void __stdcall (*PopMatrix)(void);
	void __stdcall (*PopName)(void);
	void __stdcall (*PrioritizeTextures)(Stage::Opengltokens::TGLsizei n, Stage::Opengltokens::PGLuint textures, Winapi::Windows::PSingle priorities);
	void __stdcall (*PushAttrib)(Stage::Opengltokens::TGLbitfield mask);
	void __stdcall (*PushClientAttrib)(Stage::Opengltokens::TGLbitfield mask);
	void __stdcall (*PushMatrix)(void);
	void __stdcall (*PushName)(unsigned Name);
	void __stdcall (*RasterPos2d)(Stage::Opengltokens::TGLdouble X, Stage::Opengltokens::TGLdouble y);
	void __stdcall (*RasterPos2dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*RasterPos2f)(Stage::Opengltokens::TGLfloat X, Stage::Opengltokens::TGLfloat y);
	void __stdcall (*RasterPos2fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*RasterPos2i)(Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y);
	void __stdcall (*RasterPos2iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*RasterPos2s)(Stage::Opengltokens::PGLshort X, Stage::Opengltokens::PGLshort y);
	void __stdcall (*RasterPos2sv)(Stage::Opengltokens::PGLshort v);
	void __stdcall (*RasterPos3d)(Stage::Opengltokens::TGLdouble X, Stage::Opengltokens::TGLdouble y, Stage::Opengltokens::TGLdouble z);
	void __stdcall (*RasterPos3dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*RasterPos3f)(Stage::Opengltokens::TGLfloat X, Stage::Opengltokens::TGLfloat y, Stage::Opengltokens::TGLfloat z);
	void __stdcall (*RasterPos3fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*RasterPos3i)(Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y, Stage::Opengltokens::TGLint z);
	void __stdcall (*RasterPos3iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*RasterPos3s)(Stage::Opengltokens::TGLshort X, Stage::Opengltokens::TGLshort y, Stage::Opengltokens::TGLshort z);
	void __stdcall (*RasterPos3sv)(Stage::Opengltokens::PGLshort v);
	void __stdcall (*RasterPos4d)(Stage::Opengltokens::TGLdouble X, Stage::Opengltokens::TGLdouble y, Stage::Opengltokens::TGLdouble z, Stage::Opengltokens::TGLdouble w);
	void __stdcall (*RasterPos4dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*RasterPos4f)(Stage::Opengltokens::TGLfloat X, Stage::Opengltokens::TGLfloat y, Stage::Opengltokens::TGLfloat z, Stage::Opengltokens::TGLfloat w);
	void __stdcall (*RasterPos4fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*RasterPos4i)(Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y, Stage::Opengltokens::TGLint z, Stage::Opengltokens::TGLint w);
	void __stdcall (*RasterPos4iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*RasterPos4s)(Stage::Opengltokens::TGLshort X, Stage::Opengltokens::TGLshort y, Stage::Opengltokens::TGLshort z, Stage::Opengltokens::TGLshort w);
	void __stdcall (*RasterPos4sv)(Stage::Opengltokens::PGLshort v);
	void __stdcall (*Rectd)(Stage::Opengltokens::TGLdouble x1, Stage::Opengltokens::TGLdouble y1, Stage::Opengltokens::TGLdouble x2, Stage::Opengltokens::TGLdouble y2);
	void __stdcall (*Rectdv)(Stage::Opengltokens::PGLdouble v1, Stage::Opengltokens::PGLdouble v2);
	void __stdcall (*Rectf)(Stage::Opengltokens::TGLfloat x1, Stage::Opengltokens::TGLfloat y1, Stage::Opengltokens::TGLfloat x2, Stage::Opengltokens::TGLfloat y2);
	void __stdcall (*Rectfv)(Stage::Opengltokens::PGLfloat v1, Stage::Opengltokens::PGLfloat v2);
	void __stdcall (*Recti)(Stage::Opengltokens::TGLint x1, Stage::Opengltokens::TGLint y1, Stage::Opengltokens::TGLint x2, Stage::Opengltokens::TGLint y2);
	void __stdcall (*Rectiv)(Stage::Opengltokens::PGLint v1, Stage::Opengltokens::PGLint v2);
	void __stdcall (*Rects)(Stage::Opengltokens::TGLshort x1, Stage::Opengltokens::TGLshort y1, Stage::Opengltokens::TGLshort x2, Stage::Opengltokens::TGLshort y2);
	void __stdcall (*Rectsv)(Stage::Opengltokens::PGLshort v1, Stage::Opengltokens::PGLshort v2);
	int __stdcall (*RenderMode)(unsigned mode);
	void __stdcall (*Rotated)(Stage::Opengltokens::TGLdouble ane, Stage::Opengltokens::TGLdouble X, Stage::Opengltokens::TGLdouble y, Stage::Opengltokens::TGLdouble z);
	void __stdcall (*Rotatef)(Stage::Opengltokens::TGLfloat ane, Stage::Opengltokens::TGLfloat X, Stage::Opengltokens::TGLfloat y, Stage::Opengltokens::TGLfloat z);
	void __stdcall (*Scaled)(Stage::Opengltokens::TGLdouble X, Stage::Opengltokens::TGLdouble y, Stage::Opengltokens::TGLdouble z);
	void __stdcall (*Scalef)(Stage::Opengltokens::TGLfloat X, Stage::Opengltokens::TGLfloat y, Stage::Opengltokens::TGLfloat z);
	void __stdcall (*SelectBuffer)(Stage::Opengltokens::TGLsizei size, Stage::Opengltokens::PGLuint buffer);
	void __stdcall (*ShadeModel)(unsigned mode);
	void __stdcall (*TexCoord1d)(Stage::Opengltokens::TGLdouble s);
	void __stdcall (*TexCoord1dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*TexCoord1f)(Stage::Opengltokens::TGLfloat s);
	void __stdcall (*TexCoord1fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*TexCoord1i)(Stage::Opengltokens::TGLint s);
	void __stdcall (*TexCoord1iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*TexCoord1s)(Stage::Opengltokens::TGLshort s);
	void __stdcall (*TexCoord1sv)(Stage::Opengltokens::PGLshort v);
	void __stdcall (*TexCoord2d)(Stage::Opengltokens::TGLdouble s, Stage::Opengltokens::TGLdouble t);
	void __stdcall (*TexCoord2dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*TexCoord2f)(Stage::Opengltokens::TGLfloat s, Stage::Opengltokens::TGLfloat t);
	void __stdcall (*TexCoord2fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*TexCoord2i)(Stage::Opengltokens::TGLint s, Stage::Opengltokens::TGLint t);
	void __stdcall (*TexCoord2iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*TexCoord2s)(Stage::Opengltokens::TGLshort s, Stage::Opengltokens::TGLshort t);
	void __stdcall (*TexCoord2sv)(Stage::Opengltokens::PGLshort v);
	void __stdcall (*TexCoord3d)(Stage::Opengltokens::TGLdouble s, Stage::Opengltokens::TGLdouble t, Stage::Opengltokens::TGLdouble r);
	void __stdcall (*TexCoord3dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*TexCoord3f)(Stage::Opengltokens::TGLfloat s, Stage::Opengltokens::TGLfloat t, Stage::Opengltokens::TGLfloat r);
	void __stdcall (*TexCoord3fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*TexCoord3i)(Stage::Opengltokens::TGLint s, Stage::Opengltokens::TGLint t, Stage::Opengltokens::TGLint r);
	void __stdcall (*TexCoord3iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*TexCoord3s)(Stage::Opengltokens::TGLshort s, Stage::Opengltokens::TGLshort t, Stage::Opengltokens::TGLshort r);
	void __stdcall (*TexCoord3sv)(Stage::Opengltokens::PGLshort v);
	void __stdcall (*TexCoord4d)(Stage::Opengltokens::TGLdouble s, Stage::Opengltokens::TGLdouble t, Stage::Opengltokens::TGLdouble r, Stage::Opengltokens::TGLdouble q);
	void __stdcall (*TexCoord4dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*TexCoord4f)(Stage::Opengltokens::TGLfloat s, Stage::Opengltokens::TGLfloat t, Stage::Opengltokens::TGLfloat r, Stage::Opengltokens::TGLfloat q);
	void __stdcall (*TexCoord4fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*TexCoord4i)(Stage::Opengltokens::TGLint s, Stage::Opengltokens::TGLint t, Stage::Opengltokens::TGLint r, Stage::Opengltokens::TGLint q);
	void __stdcall (*TexCoord4iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*TexCoord4s)(Stage::Opengltokens::TGLshort s, Stage::Opengltokens::TGLshort t, Stage::Opengltokens::TGLshort r, Stage::Opengltokens::TGLshort q);
	void __stdcall (*TexCoord4sv)(Stage::Opengltokens::PGLshort v);
	void __stdcall (*TexCoordPointer)(Stage::Opengltokens::TGLint size, unsigned atype, Stage::Opengltokens::TGLsizei stride, void * Data);
	void __stdcall (*TexEnvf)(unsigned target, unsigned pname, Stage::Opengltokens::TGLfloat param);
	void __stdcall (*TexEnvfv)(unsigned target, unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*TexEnvi)(unsigned target, unsigned pname, Stage::Opengltokens::TGLint param);
	void __stdcall (*TexEnviv)(unsigned target, unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*TexGend)(unsigned coord, unsigned pname, Stage::Opengltokens::TGLdouble param);
	void __stdcall (*TexGendv)(unsigned coord, unsigned pname, Stage::Opengltokens::PGLdouble params);
	void __stdcall (*TexGenf)(unsigned coord, unsigned pname, Stage::Opengltokens::TGLfloat param);
	void __stdcall (*TexGenfv)(unsigned coord, unsigned pname, Stage::Opengltokens::PGLfloat params);
	void __stdcall (*TexGeni)(unsigned coord, unsigned pname, Stage::Opengltokens::TGLint param);
	void __stdcall (*TexGeniv)(unsigned coord, unsigned pname, Stage::Opengltokens::PGLint params);
	void __stdcall (*Translated)(Stage::Opengltokens::TGLdouble X, Stage::Opengltokens::TGLdouble y, Stage::Opengltokens::TGLdouble z);
	void __stdcall (*Translatef)(Stage::Opengltokens::TGLfloat X, Stage::Opengltokens::TGLfloat y, Stage::Opengltokens::TGLfloat z);
	void __stdcall (*Vertex2d)(Stage::Opengltokens::TGLdouble X, Stage::Opengltokens::TGLdouble y);
	void __stdcall (*Vertex2dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*Vertex2f)(Stage::Opengltokens::TGLfloat X, Stage::Opengltokens::TGLfloat y);
	void __stdcall (*Vertex2fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*Vertex2i)(Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y);
	void __stdcall (*Vertex2iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*Vertex2s)(Stage::Opengltokens::TGLshort X, Stage::Opengltokens::TGLshort y);
	void __stdcall (*Vertex2sv)(Stage::Opengltokens::PGLshort v);
	void __stdcall (*Vertex3d)(Stage::Opengltokens::TGLdouble X, Stage::Opengltokens::TGLdouble y, Stage::Opengltokens::TGLdouble z);
	void __stdcall (*Vertex3dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*Vertex3f)(Stage::Opengltokens::TGLfloat X, Stage::Opengltokens::TGLfloat y, Stage::Opengltokens::TGLfloat z);
	void __stdcall (*Vertex3fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*Vertex3i)(Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y, Stage::Opengltokens::TGLint z);
	void __stdcall (*Vertex3iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*Vertex3s)(Stage::Opengltokens::TGLshort X, Stage::Opengltokens::TGLshort y, Stage::Opengltokens::TGLshort z);
	void __stdcall (*Vertex3sv)(Stage::Opengltokens::PGLshort v);
	void __stdcall (*Vertex4d)(Stage::Opengltokens::TGLdouble X, Stage::Opengltokens::TGLdouble y, Stage::Opengltokens::TGLdouble z, Stage::Opengltokens::TGLdouble w);
	void __stdcall (*Vertex4dv)(Stage::Opengltokens::PGLdouble v);
	void __stdcall (*Vertex4f)(Stage::Opengltokens::TGLfloat X, Stage::Opengltokens::TGLfloat y, Stage::Opengltokens::TGLfloat z, Stage::Opengltokens::TGLfloat w);
	void __stdcall (*Vertex4fv)(Stage::Opengltokens::PGLfloat v);
	void __stdcall (*Vertex4i)(Stage::Opengltokens::TGLint X, Stage::Opengltokens::TGLint y, Stage::Opengltokens::TGLint z, Stage::Opengltokens::TGLint w);
	void __stdcall (*Vertex4iv)(Stage::Opengltokens::PGLint v);
	void __stdcall (*Vertex4s)(Stage::Opengltokens::TGLshort X, Stage::Opengltokens::TGLshort y, Stage::Opengltokens::TGLshort z, Stage::Opengltokens::TGLshort w);
	void __stdcall (*Vertex4sv)(Stage::Opengltokens::PGLshort v);
	void __stdcall (*VertexPointer)(Stage::Opengltokens::TGLint size, unsigned atype, Stage::Opengltokens::TGLsizei stride, void * Data);
	Stage::Opengltokens::PFNGLBLENDCOLORPROC BlendColor;
	Stage::Opengltokens::PFNGLBLENDEQUATIONPROC BlendEquation;
	Stage::Opengltokens::PFNGLDRAWRANGEELEMENTSPROC DrawRangeElements;
	Stage::Opengltokens::PFNGLTEXIMAGE3DPROC TexImage3D;
	Stage::Opengltokens::PFNGLTEXSUBIMAGE3DPROC TexSubImage3D;
	Stage::Opengltokens::PFNGLCOPYTEXSUBIMAGE3DPROC CopyTexSubImage3D;
	Stage::Opengltokens::PFNGLBLENDFUNCSEPARATEPROC BlendFuncSeparate;
	Stage::Opengltokens::PFNGLMULTIDRAWARRAYSPROC MultiDrawArrays;
	Stage::Opengltokens::PFNGLMULTIDRAWELEMENTSPROC MultiDrawElements;
	Stage::Opengltokens::PFNGLPOINTPARAMETERFPROC PointParameterf;
	Stage::Opengltokens::PFNGLPOINTPARAMETERFVPROC PointParameterfv;
	Stage::Opengltokens::PFNGLPOINTPARAMETERIPROC PointParameteri;
	Stage::Opengltokens::PFNGLPOINTPARAMETERIVPROC PointParameteriv;
	Stage::Opengltokens::PFNGLBLENDEQUATIONSEPARATEPROC BlendEquationSeparate;
	Stage::Opengltokens::PFNGLDRAWBUFFERSPROC DrawBuffers;
	Stage::Opengltokens::PFNGLSTENCILOPSEPARATEPROC StencilOpSeparate;
	Stage::Opengltokens::PFNGLSTENCILFUNCSEPARATEPROC StencilFuncSeparate;
	Stage::Opengltokens::PFNGLSTENCILMASKSEPARATEPROC StencilMaskSeparate;
	Stage::Opengltokens::PFNGLLOCKARRAYSEXTPROC LockArrays;
	Stage::Opengltokens::PFNGLUNLOCKARRAYSEXTPROC UnlockArrays;
	Stage::Opengltokens::PFNGLBINDBUFFERPROC BindBuffer;
	Stage::Opengltokens::PFNGLDELETEBUFFERSPROC DeleteBuffers;
	Stage::Opengltokens::PFNGLGENBUFFERSPROC GenBuffers;
	Stage::Opengltokens::PFNGLISBUFFERPROC IsBuffer;
	Stage::Opengltokens::PFNGLBUFFERDATAPROC BufferData;
	Stage::Opengltokens::PFNGLBUFFERSUBDATAPROC BufferSubData;
	Stage::Opengltokens::PFNGLGETBUFFERSUBDATAPROC GetBufferSubData;
	Stage::Opengltokens::PFNGLMAPBUFFERPROC MapBuffer;
	Stage::Opengltokens::PFNGLUNMAPBUFFERPROC UnmapBuffer;
	Stage::Opengltokens::PFNGLGETBUFFERPARAMETERIVPROC GetBufferParameteriv;
	Stage::Opengltokens::PFNGLGETBUFFERPOINTERVPROC GetBufferPointerv;
	Stage::Opengltokens::PFNGLMAPBUFFERRANGEPROC MapBufferRange;
	Stage::Opengltokens::PFNGLFLUSHMAPPEDBUFFERRANGEPROC FlushMappedBufferRange;
	Stage::Opengltokens::PFNGLBINDBUFFERRANGEPROC BindBufferRange;
	Stage::Opengltokens::PFNGLBINDBUFFEROFFSETEXTPROC BindBufferOffset;
	Stage::Opengltokens::PFNGLBINDBUFFERBASEPROC BindBufferBase;
	Stage::Opengltokens::PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC TransformFeedbackAttribs;
	Stage::Opengltokens::PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC TransformFeedbackVaryingsNV;
	Stage::Opengltokens::PFNGLTRANSFORMFEEDBACKVARYINGSPROC TransformFeedbackVaryings;
	Stage::Opengltokens::PFNGLGETTRANSFORMFEEDBACKVARYINGPROC GetTransformFeedbackVarying;
	Stage::Opengltokens::PFNGLBEGINTRANSFORMFEEDBACKPROC BeginTransformFeedback;
	Stage::Opengltokens::PFNGLENDTRANSFORMFEEDBACKPROC EndTransformFeedback;
	Stage::Opengltokens::PFNGLTEXBUFFERPROC TexBuffer;
	Stage::Opengltokens::PFNGLCLEARBUFFERIVPROC ClearBufferiv;
	Stage::Opengltokens::PFNGLCLEARBUFFERUIVPROC ClearBufferuiv;
	Stage::Opengltokens::PFNGLCLEARBUFFERFVPROC ClearBufferfv;
	Stage::Opengltokens::PFNGLCLEARBUFFERFIPROC ClearBufferfi;
	Stage::Opengltokens::PFNGLGETSTRINGIPROC GetStringi;
	Stage::Opengltokens::PFNGLBINDVERTEXARRAYPROC BindVertexArray;
	Stage::Opengltokens::PFNGLDELETEVERTEXARRAYSPROC DeleteVertexArrays;
	Stage::Opengltokens::PFNGLGENVERTEXARRAYSPROC GenVertexArrays;
	Stage::Opengltokens::PFNGLISVERTEXARRAYPROC IsVertexArray;
	Stage::Opengltokens::PFNGLFLUSHVERTEXARRAYRANGENVPROC FlushVertexArrayRangeNV;
	Stage::Opengltokens::PFNGLVERTEXARRAYRANGENVPROC VertexArrayRangeNV;
	Stage::Opengltokens::PFNGLGETUNIFORMINDICESPROC GetUniformIndices;
	Stage::Opengltokens::PFNGLGETACTIVEUNIFORMSIVPROC GetActiveUniformsiv;
	Stage::Opengltokens::PFNGLGETACTIVEUNIFORMNAMEPROC GetActiveUniformName;
	Stage::Opengltokens::PFNGLGETUNIFORMBLOCKINDEXPROC GetUniformBlockIndex;
	Stage::Opengltokens::PFNGLGETACTIVEUNIFORMBLOCKIVPROC GetActiveUniformBlockiv;
	Stage::Opengltokens::PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC GetActiveUniformBlockName;
	Stage::Opengltokens::PFNGLUNIFORMBLOCKBINDINGPROC UniformBlockBinding;
	Stage::Opengltokens::PFNGLCOPYBUFFERSUBDATAPROC CopyBufferSubData;
	Stage::Opengltokens::PFNGLUNIFORMBUFFEREXTPROC UniformBuffer;
	Stage::Opengltokens::PFNGLGETUNIFORMBUFFERSIZEEXTPROC GetUniformBufferSize;
	Stage::Opengltokens::PFNGLGETUNIFORMOFFSETEXTPROC GetUniformOffset;
	Stage::Opengltokens::PFNGLPRIMITIVERESTARTINDEXPROC PrimitiveRestartIndex;
	Stage::Opengltokens::PFNGLDRAWELEMENTSBASEVERTEXPROC DrawElementsBaseVertex;
	Stage::Opengltokens::PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC DrawRangeElementsBaseVertex;
	Stage::Opengltokens::PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC DrawElementsInstancedBaseVertex;
	Stage::Opengltokens::PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC MultiDrawElementsBaseVertex;
	Stage::Opengltokens::PFNGLDRAWARRAYSINSTANCEDPROC DrawArraysInstanced;
	Stage::Opengltokens::PFNGLDRAWELEMENTSINSTANCEDPROC DrawElementsInstanced;
	Stage::Opengltokens::PFNGLVERTEXATTRIB1DPROC VertexAttrib1d;
	Stage::Opengltokens::PFNGLVERTEXATTRIB1DVPROC VertexAttrib1dv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB1FPROC VertexAttrib1f;
	Stage::Opengltokens::PFNGLVERTEXATTRIB1FVPROC VertexAttrib1fv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB1SPROC VertexAttrib1s;
	Stage::Opengltokens::PFNGLVERTEXATTRIB1SVPROC VertexAttrib1sv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB2DPROC VertexAttrib2d;
	Stage::Opengltokens::PFNGLVERTEXATTRIB2DVPROC VertexAttrib2dv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB2FPROC VertexAttrib2f;
	Stage::Opengltokens::PFNGLVERTEXATTRIB2FVPROC VertexAttrib2fv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB2SPROC VertexAttrib2s;
	Stage::Opengltokens::PFNGLVERTEXATTRIB2SVPROC VertexAttrib2sv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB3DPROC VertexAttrib3d;
	Stage::Opengltokens::PFNGLVERTEXATTRIB3DVPROC VertexAttrib3dv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB3FPROC VertexAttrib3f;
	Stage::Opengltokens::PFNGLVERTEXATTRIB3FVPROC VertexAttrib3fv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB3SPROC VertexAttrib3s;
	Stage::Opengltokens::PFNGLVERTEXATTRIB3SVPROC VertexAttrib3sv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4NBVPROC VertexAttrib4Nbv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4NIVPROC VertexAttrib4Niv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4NSVPROC VertexAttrib4Nsv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4NUBPROC VertexAttrib4Nub;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4NUBVPROC VertexAttrib4Nubv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4NUIVPROC VertexAttrib4Nuiv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4NUSVPROC VertexAttrib4Nusv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4BVPROC VertexAttrib4bv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4DPROC VertexAttrib4d;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4DVPROC VertexAttrib4dv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4FPROC VertexAttrib4f;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4FVPROC VertexAttrib4fv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4IVPROC VertexAttrib4iv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4SPROC VertexAttrib4s;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4SVPROC VertexAttrib4sv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4UBVPROC VertexAttrib4ubv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4UIVPROC VertexAttrib4uiv;
	Stage::Opengltokens::PFNGLVERTEXATTRIB4USVPROC VertexAttrib4usv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBPOINTERPROC VertexAttribPointer;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI1IPROC VertexAttribI1i;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI2IPROC VertexAttribI2i;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI3IPROC VertexAttribI3i;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI4IPROC VertexAttribI4i;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI1UIPROC VertexAttribI1ui;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI2UIPROC VertexAttribI2ui;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI3UIPROC VertexAttribI3ui;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI4UIPROC VertexAttribI4ui;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI1IVPROC VertexAttribI1iv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI2IVPROC VertexAttribI2iv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI3IVPROC VertexAttribI3iv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI4IVPROC VertexAttribI4iv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI1UIVPROC VertexAttribI1uiv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI2UIVPROC VertexAttribI2uiv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI3UIVPROC VertexAttribI3uiv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI4UIVPROC VertexAttribI4uiv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI4BVPROC VertexAttribI4bv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI4SVPROC VertexAttribI4sv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI4UBVPROC VertexAttribI4ubv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBI4USVPROC VertexAttribI4usv;
	Stage::Opengltokens::PFNGLVERTEXATTRIBIPOINTERPROC VertexAttribIPointer;
	Stage::Opengltokens::PFNGLGETVERTEXATTRIBIIVPROC GetVertexAttribIiv;
	Stage::Opengltokens::PFNGLGETVERTEXATTRIBIUIVPROC GetVertexAttribIuiv;
	Stage::Opengltokens::PFNGLUNIFORM1UIPROC Uniform1ui;
	Stage::Opengltokens::PFNGLUNIFORM2UIPROC Uniform2ui;
	Stage::Opengltokens::PFNGLUNIFORM3UIPROC Uniform3ui;
	Stage::Opengltokens::PFNGLUNIFORM4UIPROC Uniform4ui;
	Stage::Opengltokens::PFNGLUNIFORM1UIVPROC Uniform1uiv;
	Stage::Opengltokens::PFNGLUNIFORM2UIVPROC Uniform2uiv;
	Stage::Opengltokens::PFNGLUNIFORM3UIVPROC Uniform3uiv;
	Stage::Opengltokens::PFNGLUNIFORM4UIVPROC Uniform4uiv;
	Stage::Opengltokens::PFNGLGETUNIFORMUIVPROC GetUniformuiv;
	Stage::Opengltokens::PFNGLBINDFRAGDATALOCATIONPROC BindFragDataLocation;
	Stage::Opengltokens::PFNGLGETFRAGDATALOCATIONPROC GetFragDataLocation;
	Stage::Opengltokens::PFNGLCLAMPCOLORPROC ClampColor;
	Stage::Opengltokens::PFNGLCOLORMASKIPROC ColorMaski;
	Stage::Opengltokens::PFNGLGETBOOLEANI_VPROC GetBooleani_v;
	Stage::Opengltokens::PFNGLGETINTEGERI_VPROC GetIntegeri_v;
	Stage::Opengltokens::PFNGLENABLEIPROC Enablei;
	Stage::Opengltokens::PFNGLDISABLEIPROC Disablei;
	Stage::Opengltokens::PFNGLISENABLEDIPROC IsEnabledi;
	Stage::Opengltokens::PFNGLENABLEVERTEXATTRIBARRAYPROC EnableVertexAttribArray;
	Stage::Opengltokens::PFNGLDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray;
	Stage::Opengltokens::PFNGLVERTEXATTRIBDIVISORPROC VertexAttribDivisor;
	Stage::Opengltokens::PFNGLCLEARCOLORIIEXTPROC ClearColorIi;
	Stage::Opengltokens::PFNGLCLEARCOLORIUIEXTPROC ClearColorIui;
	Stage::Opengltokens::PFNGLTEXPARAMETERIIVPROC TexParameterIiv;
	Stage::Opengltokens::PFNGLTEXPARAMETERIUIVPROC TexParameterIuiv;
	Stage::Opengltokens::PFNGLGETTEXPARAMETERIIVPROC GetTexParameterIiv;
	Stage::Opengltokens::PFNGLGETTEXPARAMETERIUIVPROC GetTexParameterIuiv;
	Stage::Opengltokens::PFNGLPATCHPARAMETERIPROC PatchParameteri;
	Stage::Opengltokens::PFNGLPATCHPARAMETERFVPROC PatchParameterfv;
	Stage::Opengltokens::PFNGLBUFFERADDRESSRANGENVPROC BufferAddressRangeNV;
	Stage::Opengltokens::PFNGLVERTEXFORMATNVPROC VertexFormatNV;
	Stage::Opengltokens::PFNGLNORMALFORMATNVPROC NormalFormatNV;
	Stage::Opengltokens::PFNGLCOLORFORMATNVPROC ColorFormatNV;
	Stage::Opengltokens::PFNGLINDEXFORMATNVPROC IndexFormatNV;
	Stage::Opengltokens::PFNGLTEXCOORDFORMATNVPROC TexCoordFormatNV;
	Stage::Opengltokens::PFNGLEDGEFLAGFORMATNVPROC EdgeFlagFormatNV;
	Stage::Opengltokens::PFNGLSECONDARYCOLORFORMATNVPROC SecondaryColorFormatNV;
	Stage::Opengltokens::PFNGLFOGCOORDFORMATNVPROC FogCoordFormatNV;
	Stage::Opengltokens::PFNGLVERTEXATTRIBFORMATNVPROC VertexAttribFormatNV;
	Stage::Opengltokens::PFNGLVERTEXATTRIBIFORMATNVPROC VertexAttribIFormatNV;
	Stage::Opengltokens::PFNGLGETINTEGERUI64I_VNVPROC GetIntegerui64i_vNV;
	Stage::Opengltokens::PGNGLGETBUFFERPARAMETERUI64VNV GetBufferParameterui64vNV;
	Stage::Opengltokens::PFNGLMAKEBUFFERRESIDENTNVPROC MakeBufferResidentNV;
	Stage::Opengltokens::PFNGLMAKEBUFFERNONRESIDENTNVPROC MakeBufferNonResidentNV;
	Stage::Opengltokens::PFNGLISBUFFERRESIDENTNVPROC IsBufferResidentNV;
	Stage::Opengltokens::PFNGLMAKENAMEDBUFFERRESIDENTNVPROC MakeNamedBufferResidentNV;
	Stage::Opengltokens::PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC MakeNamedBufferNonResidentNV;
	Stage::Opengltokens::PFNGLISNAMEDBUFFERRESIDENTNVPROC IsNamedBufferResidentNV;
	Stage::Opengltokens::PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC GetNamedBufferParameterui64vNV;
	Stage::Opengltokens::PFNGLGETINTEGERUI64VNVPROC GetIntegerui64vNV;
	Stage::Opengltokens::PFNGLUNIFORMUI64NVPROC Uniformui64NV;
	Stage::Opengltokens::PFNGLUNIFORMUI64VNVPROC Uniformui64vNV;
	Stage::Opengltokens::PFNGLGETUNIFORMUI64VNVPROC GetUniformui64vNV;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMUI64NVPROC ProgramUniformui64NV;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMUI64VNVPROC ProgramUniformui64vNV;
	Stage::Opengltokens::PFNGLClearBufferData ClearBufferData;
	Stage::Opengltokens::PFNGLClearBufferSubData ClearBufferSubData;
	Stage::Opengltokens::PFNGLClearNamedBufferData ClearNamedBufferData;
	Stage::Opengltokens::PFNGLClearNamedBufferSubData ClearNamedBufferSubData;
	Stage::Opengltokens::PFNGLInvalidateTexSubImage InvalidateTexSubImage;
	Stage::Opengltokens::PFNGLInvalidateTexImage InvalidateTexImage;
	Stage::Opengltokens::PFNGLInvalidateBufferSubData InvalidateBufferSubData;
	Stage::Opengltokens::PFNGLInvalidateBufferData InvalidateBufferData;
	Stage::Opengltokens::PFNGLInvalidateFramebuffer InvalidateFramebuffer;
	Stage::Opengltokens::PFNGLInvalidateSubFramebuffer InvalidateSubFramebuffer;
	Stage::Opengltokens::PFNGLMultiDrawArraysIndirect MultiDrawArraysIndirect;
	Stage::Opengltokens::PFNGLMultiDrawElementsIndirect MultiDrawElementsIndirect;
	Stage::Opengltokens::PFNGLBindVertexBuffer BindVertexBuffer;
	Stage::Opengltokens::PFNGLVertexAttribFormat VertexAttribFormat;
	Stage::Opengltokens::PFNGLVertexAttribIFormat VertexAttribIFormat;
	Stage::Opengltokens::PFNGLVertexAttribLFormat VertexAttribLFormat;
	Stage::Opengltokens::PFNGLVertexAttribBinding VertexAttribBinding;
	Stage::Opengltokens::PFNGLVertexBindingDivisor VertexBindingDivisor;
	Stage::Opengltokens::PFNGLVertexArrayBindVertexBuffer VertexArrayBindVertexBuffer;
	Stage::Opengltokens::PFNGLVertexArrayVertexAttribFormat VertexArrayVertexAttribFormat;
	Stage::Opengltokens::PFNGLVertexArrayVertexAttribIFormat VertexArrayVertexAttribIFormat;
	Stage::Opengltokens::PFNGLVertexArrayVertexAttribLFormat VertexArrayVertexAttribLFormat;
	Stage::Opengltokens::PFNGLVertexArrayVertexAttribBinding VertexArrayVertexAttribBinding;
	Stage::Opengltokens::PFNGLVertexArrayVertexBindingDivisor VertexArrayVertexBindingDivisor;
	Stage::Opengltokens::PFNGLDELETEOBJECTARBPROC DeleteObject;
	Stage::Opengltokens::PFNGLGETHANDLEARBPROC GetHandle;
	Stage::Opengltokens::PFNGLDETACHSHADERPROC DetachShader;
	Stage::Opengltokens::PFNGLCREATESHADERPROC CreateShader;
	Stage::Opengltokens::PFNGLDELETESHADERPROC DeleteShader;
	Stage::Opengltokens::PFNGLSHADERSOURCEPROC ShaderSource;
	Stage::Opengltokens::PFNGLCOMPILESHADERPROC CompileShader;
	Stage::Opengltokens::PFNGLCREATEPROGRAMPROC CreateProgram;
	Stage::Opengltokens::PFNGLDELETEPROGRAMPROC DeleteProgram;
	Stage::Opengltokens::PFNGLATTACHSHADERPROC AttachShader;
	Stage::Opengltokens::PFNGLLINKPROGRAMPROC LinkProgram;
	Stage::Opengltokens::PFNGLUSEPROGRAMPROC UseProgram;
	Stage::Opengltokens::PFNGLVALIDATEPROGRAMPROC ValidateProgram;
	Stage::Opengltokens::PFNGLUNIFORM1FPROC Uniform1f;
	Stage::Opengltokens::PFNGLUNIFORM2FPROC Uniform2f;
	Stage::Opengltokens::PFNGLUNIFORM3FPROC Uniform3f;
	Stage::Opengltokens::PFNGLUNIFORM4FPROC Uniform4f;
	Stage::Opengltokens::PFNGLUNIFORM1IPROC Uniform1i;
	Stage::Opengltokens::PFNGLUNIFORM2IPROC Uniform2i;
	Stage::Opengltokens::PFNGLUNIFORM3IPROC Uniform3i;
	Stage::Opengltokens::PFNGLUNIFORM4IPROC Uniform4i;
	Stage::Opengltokens::PFNGLUNIFORM1FVPROC Uniform1fv;
	Stage::Opengltokens::PFNGLUNIFORM2FVPROC Uniform2fv;
	Stage::Opengltokens::PFNGLUNIFORM3FVPROC Uniform3fv;
	Stage::Opengltokens::PFNGLUNIFORM4FVPROC Uniform4fv;
	Stage::Opengltokens::PFNGLUNIFORM1IVPROC Uniform1iv;
	Stage::Opengltokens::PFNGLUNIFORM2IVPROC Uniform2iv;
	Stage::Opengltokens::PFNGLUNIFORM3IVPROC Uniform3iv;
	Stage::Opengltokens::PFNGLUNIFORM4IVPROC Uniform4iv;
	Stage::Opengltokens::PFNGLUNIFORMMATRIX2FVPROC UniformMatrix2fv;
	Stage::Opengltokens::PFNGLUNIFORMMATRIX3FVPROC UniformMatrix3fv;
	Stage::Opengltokens::PFNGLUNIFORMMATRIX4FVPROC UniformMatrix4fv;
	Stage::Opengltokens::PFNGLGETOBJECTPARAMETERFVARBPROC GetObjectParameterfv;
	Stage::Opengltokens::PFNGLGETOBJECTPARAMETERIVARBPROC GetObjectParameteriv;
	Stage::Opengltokens::PFNGLGETINFOLOGARBPROC GetInfoLog;
	Stage::Opengltokens::PFNGLGETATTACHEDOBJECTSARBPROC GetAttachedObjects;
	Stage::Opengltokens::PFNGLGETACTIVEATTRIBPROC GetActiveAttrib;
	Stage::Opengltokens::PFNGLGETACTIVEUNIFORMPROC GetActiveUniform;
	Stage::Opengltokens::PFNGLGETATTACHEDSHADERSPROC GetAttachedShaders;
	Stage::Opengltokens::PFNGLGETATTRIBLOCATIONPROC GetAttribLocation;
	Stage::Opengltokens::PFNGLGETPROGRAMIVPROC GetProgramiv;
	Stage::Opengltokens::PFNGLGETPROGRAMINFOLOGPROC GetProgramInfoLog;
	Stage::Opengltokens::PFNGLGETSHADERIVPROC GetShaderiv;
	Stage::Opengltokens::PFNGLGETSHADERINFOLOGPROC GetShaderInfoLog;
	Stage::Opengltokens::PFNGLGETSHADERSOURCEPROC GetShaderSource;
	Stage::Opengltokens::PFNGLGETUNIFORMLOCATIONPROC GetUniformLocation;
	Stage::Opengltokens::PFNGLGETUNIFORMFVPROC GetUniformfv;
	Stage::Opengltokens::PFNGLGETUNIFORMIVPROC GetUniformiv;
	Stage::Opengltokens::PFNGLGETVERTEXATTRIBDVPROC GetVertexAttribdv;
	Stage::Opengltokens::PFNGLGETVERTEXATTRIBFVPROC GetVertexAttribfv;
	Stage::Opengltokens::PFNGLGETVERTEXATTRIBIVPROC GetVertexAttribiv;
	Stage::Opengltokens::PFNGLGETVERTEXATTRIBPOINTERVPROC GetVertexAttribPointerv;
	Stage::Opengltokens::PFNGLISPROGRAMPROC IsProgram;
	Stage::Opengltokens::PFNGLISSHADERPROC IsShader;
	Stage::Opengltokens::PFNGLBINDATTRIBLOCATIONPROC BindAttribLocation;
	Stage::Opengltokens::PFNGLBINDFRAGDATALOCATIONINDEXEDPROC BindFragDataLocationIndexed;
	Stage::Opengltokens::PFNGLGETFRAGDATAINDEXPROC GetFragDataIndex;
	Stage::Opengltokens::PFNGLGETVARYINGLOCATIONNVPROC GetVaryingLocation;
	Stage::Opengltokens::PFNGLGETACTIVEVARYINGNVPROC GetActiveVarying;
	Stage::Opengltokens::PFNGLACTIVEVARYINGNVPROC ActiveVarying;
	Stage::Opengltokens::PFNGLGETPROGRAMBINARYPROC GetProgramBinary;
	Stage::Opengltokens::PFNGLPROGRAMBINARYPROC ProgramBinary;
	Stage::Opengltokens::PFNGLUSEPROGRAMSTAGESPROC UseProgramStages;
	Stage::Opengltokens::PFNGLACTIVESHADERPROGRAMPROC ActiveShaderProgram;
	Stage::Opengltokens::PFNGLCREATESHADERPROGRAMVPROC CreateShaderProgramv;
	Stage::Opengltokens::PFNGLBINDPROGRAMPIPELINEPROC BindProgramPipeline;
	Stage::Opengltokens::PFNGLDELETEPROGRAMPIPELINESPROC DeleteProgramPipelines;
	Stage::Opengltokens::PFNGLGENPROGRAMPIPELINESPROC GenProgramPipelines;
	Stage::Opengltokens::PFNGLISPROGRAMPIPELINEPROC IsProgramPipeline;
	Stage::Opengltokens::PFNGLGETPROGRAMPIPELINEIVPROC GetProgramPipelineiv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM1IPROC ProgramUniform1i;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM1IVPROC ProgramUniform1iv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM1FPROC ProgramUniform1f;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM1FVPROC ProgramUniform1fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM1DPROC ProgramUniform1d;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM1DVPROC ProgramUniform1dv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM1UIPROC ProgramUniform1ui;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM1UIVPROC ProgramUniform1uiv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM2IPROC ProgramUniform2i;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM2IVPROC ProgramUniform2iv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM2FPROC ProgramUniform2f;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM2FVPROC ProgramUniform2fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM2DPROC ProgramUniform2d;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM2DVPROC ProgramUniform2dv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM2UIPROC ProgramUniform2ui;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM2UIVPROC ProgramUniform2uiv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM3IPROC ProgramUniform3i;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM3IVPROC ProgramUniform3iv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM3FPROC ProgramUniform3f;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM3FVPROC ProgramUniform3fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM3DPROC ProgramUniform3d;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM3DVPROC ProgramUniform3dv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM3UIPROC ProgramUniform3ui;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM3UIVPROC ProgramUniform3uiv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM4IPROC ProgramUniform4i;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM4IVPROC ProgramUniform4iv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM4FPROC ProgramUniform4f;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM4FVPROC ProgramUniform4fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM4DPROC ProgramUniform4d;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM4DVPROC ProgramUniform4dv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM4UIPROC ProgramUniform4ui;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORM4UIVPROC ProgramUniform4uiv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX2FVPROC ProgramUniformMatrix2fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX3FVPROC ProgramUniformMatrix3fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX4FVPROC ProgramUniformMatrix4fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX2DVPROC ProgramUniformMatrix2dv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX3DVPROC ProgramUniformMatrix3dv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX4DVPROC ProgramUniformMatrix4dv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC ProgramUniformMatrix2x3fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC ProgramUniformMatrix3x2fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC ProgramUniformMatrix2x4fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC ProgramUniformMatrix4x2fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC ProgramUniformMatrix3x4fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC ProgramUniformMatrix4x3fv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC ProgramUniformMatrix2x3dv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC ProgramUniformMatrix3x2dv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC ProgramUniformMatrix2x4dv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC ProgramUniformMatrix4x2dv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC ProgramUniformMatrix3x4dv;
	Stage::Opengltokens::PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC ProgramUniformMatrix4x3dv;
	Stage::Opengltokens::PFNGLVALIDATEPROGRAMPIPELINEPROC ValidateProgramPipeline;
	Stage::Opengltokens::PFNGLGETPROGRAMPIPELINEINFOLOGPROC GetProgramPipelineInfoLog;
	Stage::Opengltokens::PFNGLDispatchCompute DispatchCompute;
	Stage::Opengltokens::PFNGLDispatchComputeIndirect DispatchComputeIndirect;
	Stage::Opengltokens::PFNGLShaderStorageBlockBinding ShaderStorageBlockBinding;
	Stage::Opengltokens::PFNGLISRENDERBUFFERPROC IsRenderbuffer;
	Stage::Opengltokens::PFNGLBINDRENDERBUFFERPROC BindRenderbuffer;
	Stage::Opengltokens::PFNGLDELETERENDERBUFFERSPROC DeleteRenderbuffers;
	Stage::Opengltokens::PFNGLGENRENDERBUFFERSPROC GenRenderbuffers;
	Stage::Opengltokens::PFNGLRENDERBUFFERSTORAGEPROC RenderbufferStorage;
	Stage::Opengltokens::PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC RenderbufferStorageMultisample;
	Stage::Opengltokens::PFNGLGETRENDERBUFFERPARAMETERIVPROC GetRenderbufferParameteriv;
	Stage::Opengltokens::PFNGLISFRAMEBUFFERPROC IsFramebuffer;
	Stage::Opengltokens::PFNGLBINDFRAMEBUFFERPROC BindFramebuffer;
	Stage::Opengltokens::PFNGLDELETEFRAMEBUFFERSPROC DeleteFramebuffers;
	Stage::Opengltokens::PFNGLGENFRAMEBUFFERSPROC GenFramebuffers;
	Stage::Opengltokens::PFNGLCHECKFRAMEBUFFERSTATUSPROC CheckFramebufferStatus;
	Stage::Opengltokens::PFNGLFRAMEBUFFERTEXTUREPROC FramebufferTexture;
	Stage::Opengltokens::PFNGLFRAMEBUFFERTEXTURE1DPROC FramebufferTexture1D;
	Stage::Opengltokens::PFNGLFRAMEBUFFERTEXTURE2DPROC FramebufferTexture2D;
	Stage::Opengltokens::PFNGLFRAMEBUFFERTEXTURE3DPROC FramebufferTexture3D;
	Stage::Opengltokens::PFNGLFRAMEBUFFERTEXTURELAYERPROC FramebufferTextureLayer;
	Stage::Opengltokens::PFNGLFRAMEBUFFERTEXTUREFACEARBPROC FramebufferTextureFace;
	Stage::Opengltokens::PFNGLFRAMEBUFFERRENDERBUFFERPROC FramebufferRenderbuffer;
	Stage::Opengltokens::PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC GetFramebufferAttachmentParameteriv;
	Stage::Opengltokens::PFNGLBLITFRAMEBUFFERPROC BlitFramebuffer;
	Stage::Opengltokens::PFNGLGENERATEMIPMAPPROC GenerateMipmap;
	Stage::Opengltokens::PFNGLFramebufferParameteri FramebufferParameteri;
	Stage::Opengltokens::PFNGLNamedFramebufferParameteri NamedFramebufferParameteri;
	Stage::Opengltokens::PFNGLGetNamedFramebufferParameteriv GetNamedFramebufferParameteriv;
	Stage::Opengltokens::PFNGLGENQUERIESPROC GenQueries;
	Stage::Opengltokens::PFNGLDELETEQUERIESPROC DeleteQueries;
	Stage::Opengltokens::PFNGLISQUERYPROC IsQuery;
	Stage::Opengltokens::PFNGLBEGINQUERYPROC BeginQuery;
	Stage::Opengltokens::PFNGLENDQUERYPROC EndQuery;
	Stage::Opengltokens::PFNGLGETQUERYIVPROC GetQueryiv;
	Stage::Opengltokens::PFNGLGETQUERYOBJECTIVPROC GetQueryObjectiv;
	Stage::Opengltokens::PFNGLGETQUERYOBJECTUIVPROC GetQueryObjectuiv;
	Stage::Opengltokens::PFNGLQUERYCOUNTERPROC QueryCounter;
	Stage::Opengltokens::PFNGLGETQUERYOBJECTI64VPROC GetQueryObjecti64v;
	Stage::Opengltokens::PFNGLGETQUERYOBJECTUI64VPROC GetQueryObjectui64v;
	Stage::Opengltokens::PFNGLGetInternalformati64v GetInternalformati64v;
	Stage::Opengltokens::PFNGLGetProgramInterfaceiv GetProgramInterfaceiv;
	Stage::Opengltokens::PFNGLGetProgramResourceIndex GetProgramResourceIndex;
	Stage::Opengltokens::PFNGLGetProgramResourceName GetProgramResourceName;
	Stage::Opengltokens::PFNGLGetProgramResourceiv GetProgramResourceiv;
	Stage::Opengltokens::PFNGLGetProgramResourceLocation GetProgramResourceLocation;
	Stage::Opengltokens::PFNGLGetProgramResourceLocationIndex GetProgramResourceLocationIndex;
	Stage::Opengltokens::PFNGLACTIVETEXTUREPROC ActiveTexture;
	Stage::Opengltokens::PFNGLSAMPLECOVERAGEPROC SampleCoverage;
	Stage::Opengltokens::PFNGLCOMPRESSEDTEXIMAGE3DPROC CompressedTexImage3D;
	Stage::Opengltokens::PFNGLCOMPRESSEDTEXIMAGE2DPROC CompressedTexImage2D;
	Stage::Opengltokens::PFNGLCOMPRESSEDTEXIMAGE1DPROC CompressedTexImage1D;
	Stage::Opengltokens::PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC CompressedTexSubImage3D;
	Stage::Opengltokens::PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC CompressedTexSubImage2D;
	Stage::Opengltokens::PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC CompressedTexSubImage1D;
	Stage::Opengltokens::PFNGLGETCOMPRESSEDTEXIMAGEPROC GetCompressedTexImage;
	Stage::Opengltokens::PFNGLCLIENTACTIVETEXTUREPROC ClientActiveTexture;
	Stage::Opengltokens::PFNGLMULTITEXCOORD1DPROC MultiTexCoord1d;
	Stage::Opengltokens::PFNGLMULTITEXCOORD1DVPROC MultiTexCoord1dV;
	Stage::Opengltokens::PFNGLMULTITEXCOORD1FPROC MultiTexCoord1f;
	Stage::Opengltokens::PFNGLMULTITEXCOORD1FVPROC MultiTexCoord1fv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD1IPROC MultiTexCoord1i;
	Stage::Opengltokens::PFNGLMULTITEXCOORD1IVPROC MultiTexCoord1iv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD1SPROC MultiTexCoord1s;
	Stage::Opengltokens::PFNGLMULTITEXCOORD1SVPROC MultiTexCoord1sv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD2DPROC MultiTexCoord2d;
	Stage::Opengltokens::PFNGLMULTITEXCOORD2DVPROC MultiTexCoord2dv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD2FPROC MultiTexCoord2f;
	Stage::Opengltokens::PFNGLMULTITEXCOORD2FVPROC MultiTexCoord2fv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD2IPROC MultiTexCoord2i;
	Stage::Opengltokens::PFNGLMULTITEXCOORD2IVPROC MultiTexCoord2iv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD2SPROC MultiTexCoord2s;
	Stage::Opengltokens::PFNGLMULTITEXCOORD2SVPROC MultiTexCoord2sv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD3DPROC MultiTexCoord3d;
	Stage::Opengltokens::PFNGLMULTITEXCOORD3DVPROC MultiTexCoord3dv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD3FPROC MultiTexCoord3f;
	Stage::Opengltokens::PFNGLMULTITEXCOORD3FVPROC MultiTexCoord3fv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD3IPROC MultiTexCoord3i;
	Stage::Opengltokens::PFNGLMULTITEXCOORD3IVPROC MultiTexCoord3iv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD3SPROC MultiTexCoord3s;
	Stage::Opengltokens::PFNGLMULTITEXCOORD3SVPROC MultiTexCoord3sv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD4DPROC MultiTexCoord4d;
	Stage::Opengltokens::PFNGLMULTITEXCOORD4DVPROC MultiTexCoord4dv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD4FPROC MultiTexCoord4f;
	Stage::Opengltokens::PFNGLMULTITEXCOORD4FVPROC MultiTexCoord4fv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD4IPROC MultiTexCoord4i;
	Stage::Opengltokens::PFNGLMULTITEXCOORD4IVPROC MultiTexCoord4iv;
	Stage::Opengltokens::PFNGLMULTITEXCOORD4SPROC MultiTexCoord4s;
	Stage::Opengltokens::PFNGLMULTITEXCOORD4SVPROC MultiTexCoord4sv;
	Stage::Opengltokens::PFNGLGETINTEGER64I_VPROC GetInteger64i_v;
	Stage::Opengltokens::PFNGLGETBUFFERPARAMETERI64VPROC GetBufferParameteri64v;
	Stage::Opengltokens::PFNGLPROGRAMPARAMETERIPROC ProgramParameteri;
	Stage::Opengltokens::PFNGLPROGRAMSTRINGARBPROC ProgramString;
	Stage::Opengltokens::PFNGLBINDPROGRAMARBPROC BindProgram;
	Stage::Opengltokens::PFNGLDELETEPROGRAMSARBPROC DeletePrograms;
	Stage::Opengltokens::PFNGLGENPROGRAMSARBPROC GenPrograms;
	Stage::Opengltokens::PFNGLPROGRAMENVPARAMETER4DARBPROC ProgramEnvParameter4d;
	Stage::Opengltokens::PFNGLPROGRAMENVPARAMETER4DVARBPROC ProgramEnvParameter4dv;
	Stage::Opengltokens::PFNGLPROGRAMENVPARAMETER4FARBPROC ProgramEnvParameter4f;
	Stage::Opengltokens::PFNGLPROGRAMENVPARAMETER4FVARBPROC ProgramEnvParameter4fv;
	Stage::Opengltokens::PFNGLPROGRAMLOCALPARAMETER4DARBPROC ProgramLocalParameter4d;
	Stage::Opengltokens::PFNGLPROGRAMLOCALPARAMETER4DVARBPROC ProgramLocalParameter4dv;
	Stage::Opengltokens::PFNGLPROGRAMLOCALPARAMETER4FARBPROC ProgramLocalParameter4f;
	Stage::Opengltokens::PFNGLPROGRAMLOCALPARAMETER4FVARBPROC ProgramLocalParameter4fv;
	Stage::Opengltokens::PFNGLGETPROGRAMENVPARAMETERDVARBPROC GetProgramEnvParameterdv;
	Stage::Opengltokens::PFNGLGETPROGRAMENVPARAMETERFVARBPROC GetProgramEnvParameterfv;
	Stage::Opengltokens::PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC GetProgramLocalParameterdv;
	Stage::Opengltokens::PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC GetProgramLocalParameterfv;
	Stage::Opengltokens::PFNGLTEXIMAGE2DMULTISAMPLEPROC TexImage2DMultisample;
	Stage::Opengltokens::PFNGLTEXIMAGE3DMULTISAMPLEPROC TexImage3DMultisample;
	Stage::Opengltokens::PFNGLGETMULTISAMPLEFVPROC GetMultisamplefv;
	Stage::Opengltokens::PFNGLSAMPLEMASKIPROC SampleMaski;
	Stage::Opengltokens::PFNGLPROVOKINGVERTEXPROC ProvokingVertex;
	Stage::Opengltokens::PFNGLFENCESYNCPROC FenceSync;
	Stage::Opengltokens::PFNGLISSYNCPROC IsSync;
	Stage::Opengltokens::PFNGLDELETESYNCPROC DeleteSync;
	Stage::Opengltokens::PFNGLCLIENTWAITSYNCPROC ClientWaitSync;
	Stage::Opengltokens::PFNGLWAITSYNCPROC WaitSync;
	Stage::Opengltokens::PFNGLGETINTEGER64VPROC GetInteger64v;
	Stage::Opengltokens::PFNGLGETSYNCIVPROC GetSynciv;
	Stage::Opengltokens::PFNGLBLENDEQUATIONIPROC BlendEquationi;
	Stage::Opengltokens::PFNGLBLENDEQUATIONSEPARATEIPROC BlendEquationSeparatei;
	Stage::Opengltokens::PFNGLBLENDFUNCIPROC BlendFunci;
	Stage::Opengltokens::PFNGLBLENDFUNCSEPARATEIPROC BlendFuncSeparatei;
	Stage::Opengltokens::PFNGLMINSAMPLESHADINGPROC MinSampleShading;
	Stage::Opengltokens::PFNGLGENSAMPLERSPROC GenSamplers;
	Stage::Opengltokens::PFNGLDELETESAMPLERSPROC DeleteSamplers;
	Stage::Opengltokens::PFNGLISSAMPLERPROC IsSampler;
	Stage::Opengltokens::PFNGLBINDSAMPLERPROC BindSampler;
	Stage::Opengltokens::PFNGLSAMPLERPARAMETERIPROC SamplerParameteri;
	Stage::Opengltokens::PFNGLSAMPLERPARAMETERIVPROC SamplerParameteriv;
	Stage::Opengltokens::PFNGLSAMPLERPARAMETERFPROC SamplerParameterf;
	Stage::Opengltokens::PFNGLSAMPLERPARAMETERFVPROC SamplerParameterfv;
	Stage::Opengltokens::PFNGLSAMPLERPARAMETERIIVPROC SamplerParameterIiv;
	Stage::Opengltokens::PFNGLSAMPLERPARAMETERIUIVPROC SamplerParameterIuiv;
	Stage::Opengltokens::PFNGLGETSAMPLERPARAMETERIVPROC GetSamplerParameteriv;
	Stage::Opengltokens::PFNGLGETSAMPLERPARAMETERIIVPROC GetSamplerParameterIiv;
	Stage::Opengltokens::PFNGLGETSAMPLERPARAMETERFVPROC GetSamplerParameterfv;
	Stage::Opengltokens::PFNGLGETSAMPLERPARAMETERIFVPROC GetSamplerParameterIfv;
	Stage::Opengltokens::PFNGLCopyImageSubData CopyImageSubData;
	Stage::Opengltokens::PFNGLTexBufferRange TexBufferRange;
	Stage::Opengltokens::PFNGLTextureBufferRange TextureBufferRange;
	Stage::Opengltokens::PFNGLTexStorage2DMultisample TexStorage2DMultisample;
	Stage::Opengltokens::PFNGLTexStorage3DMultisample TexStorage3DMultisample;
	Stage::Opengltokens::PFNGLTextureStorage2DMultisample TextureStorage2DMultisample;
	Stage::Opengltokens::PFNGLTextureStorage3DMultisample TextureStorage3DMultisample;
	Stage::Opengltokens::PFNGLBufferStorage BufferStorage;
	Stage::Opengltokens::PFNGLClearTexImage ClearTexImage;
	Stage::Opengltokens::PFNGLClearTexSubImage ClearTexSubImage;
	Stage::Opengltokens::PFNGLBindBuffersBase BindBuffersBase;
	Stage::Opengltokens::PFNGLBindBuffersRange BindBuffersRange;
	Stage::Opengltokens::PFNGLBindTextures BindTextures;
	Stage::Opengltokens::PFNGLBindSamplers BindSamplers;
	Stage::Opengltokens::PFNGLBindImageTextures BindImageTextures;
	Stage::Opengltokens::PFNGLBindVertexBuffers BindVertexBuffers;
	Stage::Opengltokens::PFNGLTextureView TextureView;
	Stage::Opengltokens::PFNGLCLIENTATTRIBDEFAULTEXTPROC ClientAttribDefault;
	Stage::Opengltokens::PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC PushClientAttribDefault;
	Stage::Opengltokens::PFNGLMATRIXLOADFEXTPROC MatrixLoadf;
	Stage::Opengltokens::PFNGLMATRIXLOADDEXTPROC MatrixLoadd;
	Stage::Opengltokens::PFNGLMATRIXMULTFEXTPROC MatrixMultf;
	Stage::Opengltokens::PFNGLMATRIXMULTDEXTPROC MatrixMultd;
	Stage::Opengltokens::PFNGLMATRIXLOADIDENTITYEXTPROC MatrixLoadIdentity;
	Stage::Opengltokens::PFNGLMATRIXROTATEFEXTPROC MatrixRotatef;
	Stage::Opengltokens::PFNGLMATRIXROTATEDEXTPROC MatrixRotated;
	Stage::Opengltokens::PFNGLMATRIXSCALEFEXTPROC MatrixScalef;
	Stage::Opengltokens::PFNGLMATRIXSCALEDEXTPROC MatrixScaled;
	Stage::Opengltokens::PFNGLMATRIXTRANSLATEFEXTPROC MatrixTranslatef;
	Stage::Opengltokens::PFNGLMATRIXTRANSLATEDEXTPROC MatrixTranslated;
	Stage::Opengltokens::PFNGLMATRIXFRUSTUMEXTPROC MatrixFrustum;
	Stage::Opengltokens::PFNGLMATRIXORTHOEXTPROC MatrixOrtho;
	Stage::Opengltokens::PFNGLMATRIXPOPEXTPROC MatrixPop;
	Stage::Opengltokens::PFNGLMATRIXPUSHEXTPROC MatrixPush;
	Stage::Opengltokens::PFNGLMATRIXLOADTRANSPOSEFEXTPROC MatrixLoadTransposef;
	Stage::Opengltokens::PFNGLMATRIXLOADTRANSPOSEDEXTPROC MatrixLoadTransposed;
	Stage::Opengltokens::PFNGLMATRIXMULTTRANSPOSEFEXTPROC MatrixMultTransposef;
	Stage::Opengltokens::PFNGLMATRIXMULTTRANSPOSEDEXTPROC MatrixMultTransposed;
	Stage::Opengltokens::PFNGLTEXTUREPARAMETERFVEXTPROC TextureParameterfv;
	Stage::Opengltokens::PFNGLTEXTUREPARAMETERIEXTPROC TextureParameteri;
	Stage::Opengltokens::PFNGLTEXTUREPARAMETERIVEXTPROC TextureParameteriv;
	Stage::Opengltokens::PFNGLTEXTUREIMAGE1DEXTPROC TextureImage1D;
	Stage::Opengltokens::PFNGLTEXTUREIMAGE2DEXTPROC TextureImage2D;
	Stage::Opengltokens::PFNGLTEXTURESUBIMAGE1DEXTPROC TextureSubImage1D;
	Stage::Opengltokens::PFNGLTEXTURESUBIMAGE2DEXTPROC TextureSubImage2D;
	Stage::Opengltokens::PFNGLCOPYTEXTUREIMAGE1DEXTPROC CopyTextureImage1D;
	Stage::Opengltokens::PFNGLCOPYTEXTUREIMAGE2DEXTPROC CopyTextureImage2D;
	Stage::Opengltokens::PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC CopyTextureSubImage1D;
	Stage::Opengltokens::PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC CopyTextureSubImage2D;
	Stage::Opengltokens::PFNGLGETTEXTUREIMAGEEXTPROC GetTextureImage;
	Stage::Opengltokens::PFNGLGETTEXTUREPARAMETERFVEXTPROC GetTextureParameterfv;
	Stage::Opengltokens::PFNGLGETTEXTUREPARAMETERIVEXTPROC GetTextureParameteriv;
	Stage::Opengltokens::PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC GetTextureLevelParameterfv;
	Stage::Opengltokens::PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC GetTextureLevelParameteriv;
	Stage::Opengltokens::PFNGLTEXTUREIMAGE3DEXTPROC TextureImage3D;
	Stage::Opengltokens::PFNGLTEXTURESUBIMAGE3DEXTPROC TextureSubImage3D;
	Stage::Opengltokens::PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC CopyTextureSubImage3D;
	Stage::Opengltokens::PFNGLMULTITEXPARAMETERFEXTPROC MultiTexParameterf;
	Stage::Opengltokens::PFNGLMULTITEXPARAMETERFVEXTPROC MultiTexParameterfv;
	Stage::Opengltokens::PFNGLMULTITEXPARAMETERIEXTPROC MultiTexParameteri;
	Stage::Opengltokens::PFNGLMULTITEXPARAMETERIVEXTPROC MultiTexParameteriv;
	Stage::Opengltokens::PFNGLMULTITEXIMAGE1DEXTPROC MultiTexImage1D;
	Stage::Opengltokens::PFNGLMULTITEXIMAGE2DEXTPROC MultiTexImage2D;
	Stage::Opengltokens::PFNGLMULTITEXSUBIMAGE1DEXTPROC MultiTexSubImage1D;
	Stage::Opengltokens::PFNGLMULTITEXSUBIMAGE2DEXTPROC MultiTexSubImage2D;
	Stage::Opengltokens::PFNGLCOPYMULTITEXIMAGE1DEXTPROC CopyMultiTexImage1D;
	Stage::Opengltokens::PFNGLCOPYMULTITEXIMAGE2DEXTPROC CopyMultiTexImage2D;
	Stage::Opengltokens::PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC CopyMultiTexSubImage1D;
	Stage::Opengltokens::PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC CopyMultiTexSubImage2D;
	Stage::Opengltokens::PFNGLGETMULTITEXIMAGEEXTPROC GetMultiTexImage;
	Stage::Opengltokens::PFNGLGETMULTITEXPARAMETERFVEXTPROC GetMultiTexParameterfv;
	Stage::Opengltokens::PFNGLGETMULTITEXPARAMETERIVEXTPROC GetMultiTexParameteriv;
	Stage::Opengltokens::PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC GetMultiTexLevelParameterfv;
	Stage::Opengltokens::PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC GetMultiTexLevelParameteriv;
	Stage::Opengltokens::PFNGLMULTITEXIMAGE3DEXTPROC MultiTexImage3D;
	Stage::Opengltokens::PFNGLMULTITEXSUBIMAGE3DEXTPROC MultiTexSubImage3D;
	Stage::Opengltokens::PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC CopyMultiTexSubImage3D;
	Stage::Opengltokens::PFNGLBINDMULTITEXTUREEXTPROC BindMultiTexture;
	Stage::Opengltokens::PFNGLENABLECLIENTSTATEINDEXEDEXTPROC EnableClientStateIndexed;
	Stage::Opengltokens::PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC DisableClientStateIndexed;
	Stage::Opengltokens::PFNGLMULTITEXCOORDPOINTEREXTPROC MultiTexCoordPointer;
	Stage::Opengltokens::PFNGLMULTITEXENVFEXTPROC MultiTexEnvf;
	Stage::Opengltokens::PFNGLMULTITEXENVFVEXTPROC MultiTexEnvfv;
	Stage::Opengltokens::PFNGLMULTITEXENVIEXTPROC MultiTexEnvi;
	Stage::Opengltokens::PFNGLMULTITEXENVIVEXTPROC MultiTexEnviv;
	Stage::Opengltokens::PFNGLMULTITEXGENDEXTPROC MultiTexGend;
	Stage::Opengltokens::PFNGLMULTITEXGENDVEXTPROC MultiTexGendv;
	Stage::Opengltokens::PFNGLMULTITEXGENFEXTPROC MultiTexGenf;
	Stage::Opengltokens::PFNGLMULTITEXGENFVEXTPROC MultiTexGenfv;
	Stage::Opengltokens::PFNGLMULTITEXGENIEXTPROC MultiTexGeni;
	Stage::Opengltokens::PFNGLMULTITEXGENIVEXTPROC MultiTexGeniv;
	Stage::Opengltokens::PFNGLGETMULTITEXENVFVEXTPROC GetMultiTexEnvfv;
	Stage::Opengltokens::PFNGLGETMULTITEXENVIVEXTPROC GetMultiTexEnviv;
	Stage::Opengltokens::PFNGLGETMULTITEXGENDVEXTPROC GetMultiTexGendv;
	Stage::Opengltokens::PFNGLGETMULTITEXGENFVEXTPROC GetMultiTexGenfv;
	Stage::Opengltokens::PFNGLGETMULTITEXGENIVEXTPROC GetMultiTexGeniv;
	Stage::Opengltokens::PFNGLGETFLOATINDEXEDVEXTPROC GetFloatIndexedv;
	Stage::Opengltokens::PFNGLGETDOUBLEINDEXEDVEXTPROC GetDoubleIndexedv;
	Stage::Opengltokens::PFNGLGETPOINTERINDEXEDVEXTPROC GetPointerIndexedv;
	Stage::Opengltokens::PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC CompressedTextureImage3D;
	Stage::Opengltokens::PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC CompressedTextureImage2D;
	Stage::Opengltokens::PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC CompressedTextureImage1D;
	Stage::Opengltokens::PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC CompressedTextureSubImage3D;
	Stage::Opengltokens::PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC CompressedTextureSubImage2D;
	Stage::Opengltokens::PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC CompressedTextureSubImage1D;
	Stage::Opengltokens::PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC GetCompressedTextureImage;
	Stage::Opengltokens::PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC CompressedMultiTexImage3D;
	Stage::Opengltokens::PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC CompressedMultiTexImage2D;
	Stage::Opengltokens::PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC CompressedMultiTexImage1D;
	Stage::Opengltokens::PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC CompressedMultiTexSubImage3D;
	Stage::Opengltokens::PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC CompressedMultiTexSubImage2D;
	Stage::Opengltokens::PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC CompressedMultiTexSubImage1D;
	Stage::Opengltokens::PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC GetCompressedMultiTexImage;
	Stage::Opengltokens::PFNGLNAMEDPROGRAMSTRINGEXTPROC NamedProgramString;
	Stage::Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC NamedProgramLocalParameter4d;
	Stage::Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC NamedProgramLocalParameter4dv;
	Stage::Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC NamedProgramLocalParameter4f;
	Stage::Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC NamedProgramLocalParameter4fv;
	Stage::Opengltokens::PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC GetNamedProgramLocalParameterdv;
	Stage::Opengltokens::PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC GetNamedProgramLocalParameterfv;
	Stage::Opengltokens::PFNGLGETNAMEDPROGRAMIVEXTPROC GetNamedProgramiv;
	Stage::Opengltokens::PFNGLGETNAMEDPROGRAMSTRINGEXTPROC GetNamedProgramString;
	Stage::Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC NamedProgramLocalParameters4fv;
	Stage::Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC NamedProgramLocalParameterI4i;
	Stage::Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC NamedProgramLocalParameterI4iv;
	Stage::Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC NamedProgramLocalParametersI4iv;
	Stage::Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC NamedProgramLocalParameterI4ui;
	Stage::Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC NamedProgramLocalParameterI4uiv;
	Stage::Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC NamedProgramLocalParametersI4uiv;
	Stage::Opengltokens::PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC GetNamedProgramLocalParameterIiv;
	Stage::Opengltokens::PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC GetNamedProgramLocalParameterIuiv;
	Stage::Opengltokens::PFNGLTEXTUREPARAMETERIIVEXTPROC TextureParameterIiv;
	Stage::Opengltokens::PFNGLTEXTUREPARAMETERIUIVEXTPROC TextureParameterIuiv;
	Stage::Opengltokens::PFNGLGETTEXTUREPARAMETERIIVEXTPROC GetTextureParameterIiv;
	Stage::Opengltokens::PFNGLGETTEXTUREPARAMETERIUIVEXTPROC GetTextureParameterIuiv;
	Stage::Opengltokens::PFNGLMULTITEXPARAMETERIIVEXTPROC MultiTexParameterIiv;
	Stage::Opengltokens::PFNGLMULTITEXPARAMETERIUIVEXTPROC MultiTexParameterIuiv;
	Stage::Opengltokens::PFNGLGETMULTITEXPARAMETERIIVEXTPROC GetMultiTexParameterIiv;
	Stage::Opengltokens::PFNGLGETMULTITEXPARAMETERIUIVEXTPROC GetMultiTexParameterIuiv;
	Stage::Opengltokens::PFNGLNAMEDBUFFERDATAEXTPROC NamedBufferData;
	Stage::Opengltokens::PFNGLNAMEDBUFFERSUBDATAEXTPROC NamedBufferSubData;
	Stage::Opengltokens::PFNGLMAPNAMEDBUFFEREXTPROC MapNamedBuffer;
	Stage::Opengltokens::PFNGLUNMAPNAMEDBUFFEREXTPROC UnmapNamedBuffer;
	Stage::Opengltokens::PFNGLMAPNAMEDBUFFERRANGEEXTPROC MapNamedBufferRange;
	Stage::Opengltokens::PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC FlushMappedNamedBufferRange;
	Stage::Opengltokens::PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC NamedCopyBufferSubData;
	Stage::Opengltokens::PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC GetNamedBufferParameteriv;
	Stage::Opengltokens::PFNGLGETNAMEDBUFFERPOINTERVEXTPROC GetNamedBufferPointerv;
	Stage::Opengltokens::PFNGLGETNAMEDBUFFERSUBDATAEXTPROC GetNamedBufferSubData;
	Stage::Opengltokens::PFNGLTEXTUREBUFFEREXTPROC TextureBuffer;
	Stage::Opengltokens::PFNGLMULTITEXBUFFEREXTPROC MultiTexBuffer;
	Stage::Opengltokens::PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC NamedRenderbufferStorage;
	Stage::Opengltokens::PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC GetNamedRenderbufferParameteriv;
	Stage::Opengltokens::PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC CheckNamedFramebufferStatus;
	Stage::Opengltokens::PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC NamedFramebufferTexture1D;
	Stage::Opengltokens::PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC NamedFramebufferTexture2D;
	Stage::Opengltokens::PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC NamedFramebufferTexture3D;
	Stage::Opengltokens::PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC NamedFramebufferRenderbuffer;
	Stage::Opengltokens::PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC GetNamedFramebufferAttachmentParameteriv;
	Stage::Opengltokens::PFNGLGENERATETEXTUREMIPMAPEXTPROC GenerateTextureMipmap;
	Stage::Opengltokens::PFNGLGENERATEMULTITEXMIPMAPEXTPROC GenerateMultiTexMipmap;
	Stage::Opengltokens::PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC FramebufferDrawBuffer;
	Stage::Opengltokens::PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC FramebufferDrawBuffers;
	Stage::Opengltokens::PFNGLFRAMEBUFFERREADBUFFEREXTPROC FramebufferReadBuffer;
	Stage::Opengltokens::PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC GetFramebufferParameteriv;
	Stage::Opengltokens::PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC NamedRenderbufferStorageMultisample;
	Stage::Opengltokens::PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC NamedRenderbufferStorageMultisampleCoverage;
	Stage::Opengltokens::PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC NamedFramebufferTexture;
	Stage::Opengltokens::PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC NamedFramebufferTextureLayer;
	Stage::Opengltokens::PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC NamedFramebufferTextureFace;
	Stage::Opengltokens::PFNGLTEXTURERENDERBUFFEREXTPROC TextureRenderbuffer;
	Stage::Opengltokens::PFNGLMULTITEXRENDERBUFFEREXTPROC MultiTexRenderbuffer;
	Stage::Opengltokens::PFNGLFRAMETERMINATORGREMEDYPROC FrameTerminatorGREMEDY;
	Stage::Opengltokens::PFNGLSTRINGMARKERGREMEDYPROC StringMarkerGREMEDY;
	void __fastcall (*DebugMessageEnableAMDX)(unsigned category, unsigned severity, Stage::Opengltokens::TGLsizei Count, unsigned &ids, bool Enabled);
	Stage::Opengltokens::PFNGLPushDebugGroup PushDebugGroup;
	Stage::Opengltokens::PFNGLPopDebugGroup PopDebugGroup;
	Stage::Opengltokens::PFNGLObjectLabel ObjectLabel;
	Stage::Opengltokens::PFNGLGetObjectLabel GetObjectLabel;
	Stage::Opengltokens::PFNGLObjectPtrLabel ObjectPtrLabel;
	Stage::Opengltokens::PFNGLGetObjectPtrLabel GetObjectPtrLabel;
	void __stdcall (*DebugMessageCallbackAMDX)(Stage::Opengltokens::TDebugProcAMD callback, void * userParam);
	void __stdcall (*DebugMessageControl)(unsigned type_, unsigned Source, unsigned severity, Stage::Opengltokens::TGLsizei Count, unsigned &ids, bool Enabled);
	void __stdcall (*DebugMessageInsert)(unsigned Source, unsigned severity, unsigned id, Stage::Opengltokens::TGLsizei length, const char * buf);
	void __stdcall (*DebugMessageCallback)(Stage::Opengltokens::TDebugProc callback, void * userParam);
	unsigned __stdcall (*GetDebugMessageLog)(unsigned Count, Stage::Opengltokens::TGLsizei bufSize, unsigned &severity, unsigned &severities, unsigned &ids, Stage::Opengltokens::TGLsizei &lengths, char * messageLog);
	Stage::Opengltokens::PFNGLCreateSyncFromCLevent CreateSyncFromCLevent;
	void __stdcall (*VDPAUInitNV)(const void * vdpDevice, const void * getProcAddress);
	void __stdcall (*VDPAUFiniNV)(void);
	__int64 __stdcall (*VDPAURegisterVideoSurfaceNV)(const void * vdpSurface, unsigned target, Stage::Opengltokens::TGLsizei numTextureNames, const Stage::Opengltokens::PGLuint textureNames);
	__int64 __stdcall (*VDPAURegisterOutputSurfaceNV)(const void * vdpSurface, unsigned target, Stage::Opengltokens::TGLsizei numTextureNames, const Stage::Opengltokens::PGLuint textureNames);
	void __stdcall (*VDPAUIsSurfaceNV)(Stage::Opengltokens::TGLvdpauSurfaceNV surface);
	void __stdcall (*VDPAUUnregisterSurfaceNV)(Stage::Opengltokens::TGLvdpauSurfaceNV surface);
	void __stdcall (*VDPAUGetSurfaceivNV)(Stage::Opengltokens::TGLvdpauSurfaceNV surface, unsigned pname, Stage::Opengltokens::TGLsizei bufSize, Stage::Opengltokens::PGLsizei length, Stage::Opengltokens::PGLint values);
	void __stdcall (*VDPAUSurfaceAccessNV)(Stage::Opengltokens::TGLvdpauSurfaceNV surface, unsigned access);
	void __stdcall (*VDPAUMapSurfacesNV)(Stage::Opengltokens::TGLsizei numSurfaces, const Stage::Opengltokens::PGLvdpauSurfaceNV surfaces);
	void __stdcall (*VDPAUUnmapSurfacesNV)(Stage::Opengltokens::TGLsizei numSurface, const Stage::Opengltokens::PGLvdpauSurfaceNV surfaces);
	Stage::Opengltokens::PFNGLGENPATHSNVPROC GenPathsNV;
	Stage::Opengltokens::PFNGLDELETEPATHSNVPROC DeletePathsNV;
	Stage::Opengltokens::PFNGLISPATHNVPROC IsPathNV;
	Stage::Opengltokens::PFNGLPATHCOMMANDSNVPROC PathCommandsNV;
	Stage::Opengltokens::PFNGLPATHCOORDSNVPROC PathCoordsNV;
	Stage::Opengltokens::PFNGLPATHSUBCOMMANDSNVPROC PathSubCommandsNV;
	Stage::Opengltokens::PFNGLPATHSUBCOORDSNVPROC PathSubCoordsNV;
	Stage::Opengltokens::PFNGLPATHSTRINGNVPROC PathStringNV;
	Stage::Opengltokens::PFNGLPATHGLYPHSNVPROC PathGlyphsNV;
	Stage::Opengltokens::PFNGLPATHGLYPHRANGENVPROC PathGlyphRangeNV;
	Stage::Opengltokens::PFNGLWEIGHTPATHSNVPROC WeightPathsNV;
	Stage::Opengltokens::PFNGLCOPYPATHNVPROC CopyPathNV;
	Stage::Opengltokens::PFNGLINTERPOLATEPATHSNVPROC InterpolatePathsNV;
	Stage::Opengltokens::PFNGLPATHPARAMETERIVNVPROC PathParameterivNV;
	Stage::Opengltokens::PFNGLPATHPARAMETERINVPROC PathParameteriNV;
	Stage::Opengltokens::PFNGLPATHPARAMETERFVNVPROC PathParameterfvNV;
	Stage::Opengltokens::PFNGLPATHPARAMETERFNVPROC PathParameterfNV;
	Stage::Opengltokens::PFNGLPATHDASHARRAYNVPROC PathDashArrayNV;
	Stage::Opengltokens::PFNGLPATHSTENCILFUNCNVPROC PathStencilFuncNV;
	Stage::Opengltokens::PFNGLSTENCILFILLPATHNVPROC StencilFillPathNV;
	Stage::Opengltokens::PFNGLSTENCILSTROKEPATHNVPROC StencilStrokePathNV;
	Stage::Opengltokens::PFNGLSTENCILFILLPATHINSTANCEDNVPROC StencilFillPathInstancedNV;
	Stage::Opengltokens::PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC StencilStrokePathInstancedNV;
	Stage::Opengltokens::PFNGLPATHCOLORGENNVPROC PathColorGenNV;
	Stage::Opengltokens::PFNGLPATHTEXGENNVPROC PathTexGenNV;
	Stage::Opengltokens::PFNGLPATHFOGGENNVPROC PathFogGenNV;
	Stage::Opengltokens::PFNGLCOVERFILLPATHNVPROC CoverFillPathNV;
	Stage::Opengltokens::PFNGLCOVERSTROKEPATHNVPROC CoverStrokePathNV;
	Stage::Opengltokens::PFNGLCOVERFILLPATHINSTANCEDNVPROC CoverFillPathInstancedNV;
	Stage::Opengltokens::PFNGLCOVERSTROKEPATHINSTANCEDNVPROC CoverStrokePathInstancedNV;
	Stage::Opengltokens::PFNGLGETPATHPARAMETERIVNVPROC GetPathParameterivNV;
	Stage::Opengltokens::PFNGLGETPATHPARAMETERFVNVPROC GetPathParameterfvNV;
	Stage::Opengltokens::PFNGLGETPATHCOMMANDSNVPROC GetPathCommandsNV;
	Stage::Opengltokens::PFNGLGETPATHCOORDSNVPROC GetPathCoordsNV;
	Stage::Opengltokens::PFNGLGETPATHDASHARRAYNVPROC GetPathDashArrayNV;
	Stage::Opengltokens::PFNGLGETPATHMETRICSNVPROC GetPathMetricsNV;
	Stage::Opengltokens::PFNGLGETPATHMETRICRANGENVPROC GetPathMetricRangeNV;
	Stage::Opengltokens::PFNGLGETPATHSPACINGNVPROC GetPathSpacingNV;
	Stage::Opengltokens::PFNGLGETPATHCOLORGENIVNVPROC GetPathColorGenivNV;
	Stage::Opengltokens::PFNGLGETPATHCOLORGENFVNVPROC GetPathColorGenfvNV;
	Stage::Opengltokens::PFNGLGETPATHTEXGENIVNVPROC GetPathTexGenivNV;
	Stage::Opengltokens::PFNGLGETPATHTEXGENFVNVPROC GetPathTexGenfvNV;
	Stage::Opengltokens::PFNGLISPOINTINFILLPATHNVPROC IsPointInFillPathNV;
	Stage::Opengltokens::PFNGLISPOINTINSTROKEPATHNVPROC IsPointInStrokePathNV;
	Stage::Opengltokens::PFNGLGETPATHLENGTHNVPROC GetPathLengthNV;
	Stage::Opengltokens::PFNGLPOINTALONGPATHNVPROC PointAlongPathNV;
	Stage::Opengltokens::PFNGLPATHSTENCILDEPTHOFFSETNVPROC PathStencilDepthOffsetNV;
	Stage::Opengltokens::PFNGLPATHCOVERDEPTHFUNCNVPROC PathCoverDepthFuncNV;
	bool W_ARB_buffer_region;
	bool W_ARB_create_context;
	bool W_ARB_create_context_profile;
	bool W_ARB_extensions_string;
	bool W_ARB_framebuffer_sRGB;
	bool W_ARB_make_current_read;
	bool W_ARB_multisample;
	bool W_ARB_pbuffer;
	bool W_ARB_pixel_format;
	bool W_ARB_pixel_format_float;
	bool W_ARB_render_texture;
	bool W_ATI_pixel_format_float;
	bool W_EXT_framebuffer_sRGB;
	bool W_EXT_pixel_format_packed_float;
	bool W_EXT_swap_control;
	bool W_NV_gpu_affinity;
	bool W_EXT_create_context_es2_profile;
	bool W_NV_DX_interop;
	bool W_NV_DX_interop2;
	Stage::Opengltokens::PFNWGLCREATEBUFFERREGIONARBPROC WCreateBufferRegionARB;
	Stage::Opengltokens::PFNWGLDELETEBUFFERREGIONARBPROC WDeleteBufferRegionARB;
	Stage::Opengltokens::PFNWGLSAVEBUFFERREGIONARBPROC WSaveBufferRegionARB;
	Stage::Opengltokens::PFNWGLRESTOREBUFFERREGIONARBPROC WRestoreBufferRegionARB;
	Stage::Opengltokens::PFNWGLGETEXTENSIONSSTRINGARBPROC WGetExtensionsStringARB;
	Stage::Opengltokens::PFNWGLGETPIXELFORMATATTRIBIVARBPROC WGetPixelFormatAttribivARB;
	Stage::Opengltokens::PFNWGLGETPIXELFORMATATTRIBFVARBPROC WGetPixelFormatAttribfvARB;
	Stage::Opengltokens::PFNWGLCHOOSEPIXELFORMATARBPROC WChoosePixelFormatARB;
	Stage::Opengltokens::PFNWGLMAKECONTEXTCURRENTARBPROC WMakeContextCurrentARB;
	Stage::Opengltokens::PFNWGLGETCURRENTREADDCARBPROC WGetCurrentReadDCARB;
	Stage::Opengltokens::PFNWGLCREATEPBUFFERARBPROC WCreatePbufferARB;
	Stage::Opengltokens::PFNWGLGETPBUFFERDCARBPROC WGetPbufferDCARB;
	Stage::Opengltokens::PFNWGLRELEASEPBUFFERDCARBPROC WReleasePbufferDCARB;
	Stage::Opengltokens::PFNWGLDESTROYPBUFFERARBPROC WDestroyPbufferARB;
	Stage::Opengltokens::PFNWGLQUERYPBUFFERARBPROC WQueryPbufferARB;
	Stage::Opengltokens::PFNWGLBINDTEXIMAGEARBPROC WBindTexImageARB;
	Stage::Opengltokens::PFNWGLRELEASETEXIMAGEARBPROC WReleaseTexImageARB;
	Stage::Opengltokens::PFNWGLSETPBUFFERATTRIBARBPROC WSetPbufferAttribARB;
	Stage::Opengltokens::PFNWGLCREATECONTEXTATTRIBSARBPROC WCreateContextAttribsARB;
	Stage::Opengltokens::PFNWGLENUMGPUSNVPROC WEnumGpusNV;
	Stage::Opengltokens::PFNWGLENUMGPUDEVICESNVPROC WEnumGpuDevicesNV;
	Stage::Opengltokens::PFNWGLCREATEAFFINITYDCNVPROC WCreateAffinityDCNV;
	Stage::Opengltokens::PFNWGLENUMGPUSFROMAFFINITYDCNVPROC WEnumGpusFromAffinityDCNV;
	Stage::Opengltokens::PFNWGLDELETEDCNVPROC WDeleteDCNV;
	Stage::Opengltokens::PFNWGLDXSETRESOURCESHAREHANDLEPROC WDXSetResourceShareHandleNV;
	Stage::Opengltokens::PFNWGLDXOPENDEVICEPROC WDXOpenDeviceNV;
	Stage::Opengltokens::PFNWGLDXCLOSEDEVICEPROC WDXCloseDeviceNV;
	Stage::Opengltokens::PFNWGLDXREGISTEROBJECTPROC WDXRegisterObjectNV;
	Stage::Opengltokens::PFNWGLDXUNREGISTEROBJECTPROC WDXUnregisterObjectNV;
	Stage::Opengltokens::PFNWGLDXOBJECTACCESSPROC WDXObjectAccessNV;
	Stage::Opengltokens::PFNWGLDXLOCKOBJECTSPROC WDXLockObjectsNV;
	Stage::Opengltokens::PFNWGLDXUNLOCKOBJECTSNVPROC WDXUnlockObjectsNV;
	Stage::Opengltokens::PFNWGLSWAPINTERVALEXTPROC WSwapIntervalEXT;
	Stage::Opengltokens::PFNWGLGETSWAPINTERVALEXTPROC WGetSwapIntervalEXT;
	Stage::Opengltokens::PFNWGLALLOCATEMEMORYNVPROC WAllocateMemoryNV;
	Stage::Opengltokens::PFNWGLFREEMEMORYNVPROC WFreeMemoryNV;
	void __stdcall (*UNurbsCallbackDataEXT)(Stage::Opengltokens::PGLUNurbs nurb, void * userData);
	Stage::Opengltokens::PGLUNurbs __stdcall (*UNewNurbsTessellatorEXT)(void);
	void __stdcall (*UDeleteNurbsTessellatorEXT)(Stage::Opengltokens::PGLUNurbs nurb);
	__fastcall TGLExtensionsAndEntryPoints();
	void __fastcall Initialize(bool ATemporary = false);
	void __fastcall Close();
	void __fastcall CheckError();
	void __fastcall ClearError();
	__property bool IsInitialized = {read=FInitialized, nodefault};
	__property bool DebugMode = {read=FDebug, write=FDebug, nodefault};
public:
	/* TObject.Destroy */ inline __fastcall virtual ~TGLExtensionsAndEntryPoints() { }
	
};


//-- var, const, procedure ---------------------------------------------------
#define opengl32 L"OpenGL32.dll"
#define glu32 L"GLU32.dll"
extern "C" System::LongBool __stdcall wglCopyContext(HGLRC p1, HGLRC p2, unsigned p3);
extern "C" HGLRC __stdcall wglCreateContext(HDC DC);
extern "C" HGLRC __stdcall wglCreateLayerContext(HDC p1, int p2);
extern "C" System::LongBool __stdcall wglDeleteContext(HGLRC p1);
extern "C" HGLRC __stdcall wglGetCurrentContext(void);
extern "C" HDC __stdcall wglGetCurrentDC(void);
extern "C" System::LongBool __stdcall wglMakeCurrent(HDC DC, HGLRC p2);
extern "C" System::LongBool __stdcall wglRealizeLayerPalette(HDC p1, int p2, System::LongBool p3);
extern "C" System::LongBool __stdcall wglShareLists(HGLRC p1, HGLRC p2);
extern "C" System::LongBool __stdcall wglSwapLayerBuffers(HDC p1, unsigned p2);
extern "C" char * __stdcall gluErrorString(unsigned errCode);
extern "C" char * __stdcall gluGetString(unsigned Name);
extern "C" void __stdcall gluOrtho2D(Stage::Opengltokens::TGLdouble left, Stage::Opengltokens::TGLdouble right, Stage::Opengltokens::TGLdouble bottom, Stage::Opengltokens::TGLdouble top);
extern "C" void __stdcall gluPerspective(Stage::Opengltokens::TGLdouble fovy, Stage::Opengltokens::TGLdouble aspect, Stage::Opengltokens::TGLdouble zNear, Stage::Opengltokens::TGLdouble zFar);
extern "C" void __stdcall gluPickMatrix(Stage::Opengltokens::TGLdouble X, Stage::Opengltokens::TGLdouble y, Stage::Opengltokens::TGLdouble Width, Stage::Opengltokens::TGLdouble Height, const Stage::Vectortypes::TVector4i &Viewport);
extern "C" void __stdcall gluLookAt(Stage::Opengltokens::TGLdouble eyex, Stage::Opengltokens::TGLdouble eyey, Stage::Opengltokens::TGLdouble eyez, Stage::Opengltokens::TGLdouble centerx, Stage::Opengltokens::TGLdouble centery, Stage::Opengltokens::TGLdouble centerz, Stage::Opengltokens::TGLdouble upx, Stage::Opengltokens::TGLdouble upy, Stage::Opengltokens::TGLdouble upz);
extern "C" Stage::Opengltokens::TGLint __stdcall gluProject(Stage::Opengltokens::TGLdouble objx, Stage::Opengltokens::TGLdouble objy, Stage::Opengltokens::TGLdouble objz, const Stage::Vectortypes::TMatrix4d &modelMatrix, const Stage::Vectortypes::TMatrix4d &projMatrix, const Stage::Vectortypes::TVector4i &Viewport, Stage::Opengltokens::PGLdouble winx, Stage::Opengltokens::PGLdouble winy, Stage::Opengltokens::PGLdouble winz);
extern "C" Stage::Opengltokens::TGLint __stdcall gluUnProject(Stage::Opengltokens::TGLdouble winx, Stage::Opengltokens::TGLdouble winy, Stage::Opengltokens::TGLdouble winz, const Stage::Vectortypes::TMatrix4d &modelMatrix, const Stage::Vectortypes::TMatrix4d &projMatrix, const Stage::Vectortypes::TVector4i &Viewport, Stage::Opengltokens::PGLdouble objx, Stage::Opengltokens::PGLdouble objy, Stage::Opengltokens::PGLdouble objz);
extern "C" Stage::Opengltokens::TGLint __stdcall gluScaleImage(unsigned format, Stage::Opengltokens::TGLint widthin, Stage::Opengltokens::TGLint heightin, unsigned typein, void * datain, Stage::Opengltokens::TGLint widthout, Stage::Opengltokens::TGLint heightout, unsigned typeout, void * dataout);
extern "C" Stage::Opengltokens::TGLint __stdcall gluBuild1DMipmaps(unsigned target, Stage::Opengltokens::TGLint Components, Stage::Opengltokens::TGLint Width, unsigned format, unsigned atype, void * Data);
extern "C" Stage::Opengltokens::TGLint __stdcall gluBuild2DMipmaps(unsigned target, Stage::Opengltokens::TGLint Components, Stage::Opengltokens::TGLint Width, Stage::Opengltokens::TGLint Height, unsigned format, unsigned atype, void * Data);
extern "C" Stage::Opengltokens::PGLUQuadric __stdcall gluNewQuadric(void);
extern "C" void __stdcall gluDeleteQuadric(Stage::Opengltokens::PGLUQuadric state);
extern "C" void __stdcall gluQuadricNormals(Stage::Opengltokens::PGLUQuadric quadObject, unsigned normals);
extern "C" void __stdcall gluQuadricTexture(Stage::Opengltokens::PGLUQuadric quadObject, Stage::Opengltokens::TGLboolean textureCoords);
extern "C" void __stdcall gluQuadricOrientation(Stage::Opengltokens::PGLUQuadric quadObject, unsigned orientation);
extern "C" void __stdcall gluQuadricDrawStyle(Stage::Opengltokens::PGLUQuadric quadObject, unsigned drawStyle);
extern "C" void __stdcall gluCylinder(Stage::Opengltokens::PGLUQuadric quadObject, Stage::Opengltokens::TGLdouble baseRadius, Stage::Opengltokens::TGLdouble topRadius, Stage::Opengltokens::TGLdouble Height, Stage::Opengltokens::TGLint slices, Stage::Opengltokens::TGLint stacks);
extern "C" void __stdcall gluDisk(Stage::Opengltokens::PGLUQuadric quadObject, Stage::Opengltokens::TGLdouble innerRadius, Stage::Opengltokens::TGLdouble outerRadius, Stage::Opengltokens::TGLint slices, Stage::Opengltokens::TGLint loops);
extern "C" void __stdcall gluPartialDisk(Stage::Opengltokens::PGLUQuadric quadObject, Stage::Opengltokens::TGLdouble innerRadius, Stage::Opengltokens::TGLdouble outerRadius, Stage::Opengltokens::TGLint slices, Stage::Opengltokens::TGLint loops, Stage::Opengltokens::TGLdouble startAngle, Stage::Opengltokens::TGLdouble sweepAngle);
extern "C" void __stdcall gluSphere(Stage::Opengltokens::PGLUQuadric quadObject, Stage::Opengltokens::TGLdouble radius, Stage::Opengltokens::TGLint slices, Stage::Opengltokens::TGLint stacks);
extern "C" void __stdcall gluQuadricCallback(Stage::Opengltokens::PGLUQuadric quadObject, unsigned which, Stage::Opengltokens::TGLUQuadricErrorProc fn);
extern "C" Stage::Opengltokens::PGLUTesselator __stdcall gluNewTess(void);
extern "C" void __stdcall gluDeleteTess(Stage::Opengltokens::PGLUTesselator tess);
extern "C" void __stdcall gluTessBeginPolygon(Stage::Opengltokens::PGLUTesselator tess, void * polygon_data);
extern "C" void __stdcall gluTessBeginContour(Stage::Opengltokens::PGLUTesselator tess);
extern "C" void __stdcall gluTessVertex(Stage::Opengltokens::PGLUTesselator tess, const Stage::Vectortypes::TVector3d &coords, void * Data);
extern "C" void __stdcall gluTessEndContour(Stage::Opengltokens::PGLUTesselator tess);
extern "C" void __stdcall gluTessEndPolygon(Stage::Opengltokens::PGLUTesselator tess);
extern "C" void __stdcall gluTessProperty(Stage::Opengltokens::PGLUTesselator tess, unsigned which, Stage::Opengltokens::TGLdouble Value);
extern "C" void __stdcall gluTessNormal(Stage::Opengltokens::PGLUTesselator tess, Stage::Opengltokens::TGLdouble X, Stage::Opengltokens::TGLdouble y, Stage::Opengltokens::TGLdouble z);
extern "C" void __stdcall gluTessCallback(Stage::Opengltokens::PGLUTesselator tess, unsigned which, void * fn);
extern "C" void __stdcall gluGetTessProperty(Stage::Opengltokens::PGLUTesselator tess, unsigned which, Stage::Opengltokens::PGLdouble Value);
extern "C" Stage::Opengltokens::PGLUNurbs __stdcall gluNewNurbsRenderer(void);
extern "C" void __stdcall gluDeleteNurbsRenderer(Stage::Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluBeginSurface(Stage::Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluBeginCurve(Stage::Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluEndCurve(Stage::Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluEndSurface(Stage::Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluBeginTrim(Stage::Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluEndTrim(Stage::Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluPwlCurve(Stage::Opengltokens::PGLUNurbs nobj, Stage::Opengltokens::TGLint Count, Stage::Opengltokens::PGLfloat points, Stage::Opengltokens::TGLint stride, unsigned atype);
extern "C" void __stdcall gluNurbsCurve(Stage::Opengltokens::PGLUNurbs nobj, Stage::Opengltokens::TGLint nknots, Stage::Opengltokens::PGLfloat knot, Stage::Opengltokens::TGLint stride, Stage::Opengltokens::PGLfloat ctlarray, Stage::Opengltokens::TGLint order, unsigned atype);
extern "C" void __stdcall gluNurbsSurface(Stage::Opengltokens::PGLUNurbs nobj, Stage::Opengltokens::TGLint sknot_count, Stage::Opengltokens::PGLfloat sknot, Stage::Opengltokens::TGLint tknot_count, Stage::Opengltokens::PGLfloat tknot, Stage::Opengltokens::TGLint s_stride, Stage::Opengltokens::TGLint t_stride, Stage::Opengltokens::PGLfloat ctlarray, Stage::Opengltokens::TGLint sorder, Stage::Opengltokens::TGLint torder, unsigned atype);
extern "C" void __stdcall gluLoadSamplingMatrices(Stage::Opengltokens::PGLUNurbs nobj, const Stage::Vectortypes::TMatrix4f &modelMatrix, const Stage::Vectortypes::TMatrix4f &projMatrix, const Stage::Vectortypes::TVector4i &Viewport);
extern "C" void __stdcall gluNurbsProperty(Stage::Opengltokens::PGLUNurbs nobj, unsigned aproperty, Stage::Opengltokens::TGLfloat Value);
extern "C" void __stdcall gluGetNurbsProperty(Stage::Opengltokens::PGLUNurbs nobj, unsigned aproperty, Stage::Opengltokens::PGLfloat Value);
extern "C" void __stdcall gluNurbsCallback(Stage::Opengltokens::PGLUNurbs nobj, unsigned which, Stage::Opengltokens::TGLUNurbsErrorProc fn);
extern "C" void __stdcall gluBeginPolygon(Stage::Opengltokens::PGLUTesselator tess);
extern "C" void __stdcall gluNextContour(Stage::Opengltokens::PGLUTesselator tess, unsigned atype);
extern "C" void __stdcall gluEndPolygon(Stage::Opengltokens::PGLUTesselator tess);
extern DELPHI_PACKAGE void * __fastcall GetProcAddressGLS(char * ProcName);
extern DELPHI_PACKAGE void * __fastcall GetProcAddressGLLib(char * ProcName);
extern DELPHI_PACKAGE void __fastcall TrimAndSplitVersionString(System::UnicodeString buffer, int &max, int &min);
extern DELPHI_PACKAGE bool __fastcall IsVersionMet(int MajorVersion, int MinorVersion, int actualMajorVersion, int actualMinorVersion);
extern DELPHI_PACKAGE bool __fastcall InitOpenGL(void);
extern DELPHI_PACKAGE bool __fastcall InitOpenGLFromLibrary(const System::UnicodeString GLName, const System::UnicodeString GLUName);
extern DELPHI_PACKAGE bool __fastcall IsOpenGLInitialized(void);
extern DELPHI_PACKAGE void __fastcall CloseOpenGL(void);
extern DELPHI_PACKAGE void __fastcall UnloadOpenGL(void);
extern DELPHI_PACKAGE bool __fastcall LoadOpenGL(void);
extern DELPHI_PACKAGE bool __fastcall LoadOpenGLFromLibrary(System::UnicodeString GLName, System::UnicodeString GLUName);
extern DELPHI_PACKAGE bool __fastcall IsOpenGLLoaded(void);
extern DELPHI_PACKAGE bool __fastcall IsMesaGL(void);
}	/* namespace Opengladapter */
}	/* namespace Gxs */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_GXS_OPENGLADAPTER)
using namespace Gxs::Opengladapter;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_GXS)
using namespace Gxs;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// GXS_OpenGLAdapterHPP
