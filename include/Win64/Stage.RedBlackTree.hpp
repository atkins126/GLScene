// CodeGear C++Builder
// Copyright (c) 1995, 2024 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'Stage.RedBlackTree.pas' rev: 36.00 (Windows)

#ifndef Stage_RedBlackTreeHPP
#define Stage_RedBlackTreeHPP

#pragma delphiheader begin
#pragma option push
#if defined(__BORLANDC__) && !defined(__clang__)
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#endif
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <System.Classes.hpp>

//-- user supplied -----------------------------------------------------------

namespace Stage
{
namespace Redblacktree
{
//-- forward type declarations -----------------------------------------------
template<typename TKey, typename TValue> class DELPHICLASS GRedBlackTree__2;
//-- type declarations -------------------------------------------------------
enum DECLSPEC_DENUM TRBColor : unsigned char { clRed, clBlack };

// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename TKey, typename TValue> class PASCALIMPLEMENTATION GRedBlackTree__2 : public System::TObject
{
	typedef System::TObject inherited;
	
	
public:
	/* [Template Alias] */
	#if defined(__clang__)
	using TKeyCompareFunc = int __fastcall (*)(const TKey Item1, const TKey Item2);
	#endif
	
	/* [Template Alias] */
	#if defined(__clang__)
	using TValueCompareFunc = bool __fastcall (*)(const TValue Item1, const TValue Item2);
	#endif
	
	/* [Template Alias] */
	#if defined(__clang__)
	using TForEachProc = void __fastcall (*)(TKey AKey, TValue AValue, /* out */ bool &AContinue);
	#endif
	
	class DELPHICLASS TRBNode;
	// Template declaration generated by Delphi parameterized types is
	// used only for accessing Delphi variables and fields.
	// Don't instantiate with new type parameters in user code.
	class PASCALIMPLEMENTATION TRBNode : public System::TObject
	{
		typedef System::TObject inherited;
		
	public:
		TKey Key;
		typename GRedBlackTree__2<TKey,TValue>::TRBNode* Left;
		typename GRedBlackTree__2<TKey,TValue>::TRBNode* Right;
		typename GRedBlackTree__2<TKey,TValue>::TRBNode* Parent;
		typename GRedBlackTree__2<TKey,TValue>::TRBNode* Twin;
		TRBColor Color;
		TValue Value;
	public:
		/* TObject.Create */ inline __fastcall TRBNode() : System::TObject() { }
		/* TObject.Destroy */ inline __fastcall virtual ~TRBNode() { }
		
	};
	
	
	
public:
	TRBNode* FRoot;
	TRBNode* FLeftmost;
	TRBNode* FRightmost;
	TRBNode* FLastFound;
	TRBNode* FLastNode;
	int FCount;
	typedef int __fastcall (*_dt_Stage_Redblacktree_1)(const TKey Item1, const TKey Item2);
	_dt_Stage_Redblacktree_1 FKeyCompareFunc;
	bool FDuplicateKeys;
	typedef bool __fastcall (*_dt_Stage_Redblacktree_2)(const TValue Item1, const TValue Item2);
	_dt_Stage_Redblacktree_2 FValueCompareFunc;
	System::Classes::TNotifyEvent FOnChange;
	TRBNode* __fastcall FindNode(const TKey Key);
	void __fastcall RotateLeft(TRBNode* &x);
	void __fastcall RotateRight(TRBNode* &x);
	TRBNode* __fastcall Minimum(TRBNode* &x);
	TRBNode* __fastcall Maximum(TRBNode* &x);
	TKey __fastcall GetFirst();
	TKey __fastcall GetLast();
	void __fastcall SetDuplicateKeys(bool Value);
	__classmethod void __fastcall FastErase(TRBNode* x);
	typedef int __fastcall (*_dt_Stage_Redblacktree_3)(const TKey Item1, const TKey Item2);
	typedef bool __fastcall (*_dt_Stage_Redblacktree_4)(const TValue Item1, const TValue Item2);
	__fastcall GRedBlackTree__2(_dt_Stage_Redblacktree_3 KeyCompare, _dt_Stage_Redblacktree_4 ValueCompare);
	__fastcall virtual ~GRedBlackTree__2();
	void __fastcall Clear();
	bool __fastcall Find(const TKey Key, /* out */ TValue &Value);
	bool __fastcall NextKey(TKey &Key, /* out */ TValue &Value);
	bool __fastcall PrevKey(TKey &Key, /* out */ TValue &Value);
	bool __fastcall NextDublicate(/* out */ TValue &Value);
	void __fastcall Add(const TKey Key, const TValue Value);
	void __fastcall Delete(const TKey Key);
	typedef void __fastcall (*_dt_Stage_Redblacktree_5)(TKey AKey, TValue AValue, bool &AContinue);
	void __fastcall ForEach(_dt_Stage_Redblacktree_5 AProc);
	__property int Count = {read=FCount, nodefault};
	__property TKey First = {read=GetFirst};
	__property TKey Last = {read=GetLast};
	__property bool DuplicateKeys = {read=FDuplicateKeys, write=SetDuplicateKeys, nodefault};
	__property System::Classes::TNotifyEvent OnChange = {read=FOnChange, write=FOnChange};
};


//-- var, const, procedure ---------------------------------------------------
extern DELPHI_PACKAGE int __fastcall CompareInteger(const int Item1, const int Item2);
}	/* namespace Redblacktree */
}	/* namespace Stage */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_STAGE_REDBLACKTREE)
using namespace Stage::Redblacktree;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_STAGE)
using namespace Stage;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// Stage_RedBlackTreeHPP
