// CodeGear C++Builder
// Copyright (c) 1995, 2024 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'CUDA.DataAccess.pas' rev: 36.00 (Windows)

#ifndef CUDA_DataAccessHPP
#define CUDA_DataAccessHPP

#pragma delphiheader begin
#pragma option push
#if defined(__BORLANDC__) && !defined(__clang__)
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#endif
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <System.SysUtils.hpp>

//-- user supplied -----------------------------------------------------------

namespace Cuda
{
namespace Dataaccess
{
//-- forward type declarations -----------------------------------------------
template<typename TScalar> class DELPHICLASS GCUDAHostElementAccess__1;
//-- type declarations -------------------------------------------------------
typedef System::Word THalfFloat;

#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename TScalar> class PASCALIMPLEMENTATION GCUDAHostElementAccess__1 : public System::TObject
{
	typedef System::TObject inherited;
	
	
public:
	typedef System::StaticArray<TScalar, 2> TVector2;
	
	typedef System::Int8 _1;
	
	typedef System::StaticArray<TScalar, 3> TVector3;
	
	typedef System::Int8 _2;
	
	typedef System::StaticArray<TScalar, 4> TVector4;
	
	typedef System::Int8 _3;
	
	
public:
	static _DELPHI_CONST int ElementSize = int(0x0);
	
	
private:
	__classmethod void __fastcall CheckElementSize(unsigned ACNum);
	__classmethod TScalar __fastcall GetScalar();
	__classmethod System::StaticArray<TScalar, 2> __fastcall GetVector2();
	__classmethod System::StaticArray<TScalar, 3> __fastcall GetVector3();
	__classmethod System::StaticArray<TScalar, 4> __fastcall GetVector4();
	__classmethod void __fastcall SetScalar(const TScalar AValue);
	__classmethod void __fastcall SetVector2(const System::StaticArray<TScalar, 2> AValue);
	__classmethod void __fastcall SetVector3(const System::StaticArray<TScalar, 3> AValue);
	__classmethod void __fastcall SetVector4(const System::StaticArray<TScalar, 4> AValue);
	
public:
	__property TScalar Scalar = {read=GetScalar, write=SetScalar};
	__property System::StaticArray<TScalar, 2> Vector2 = {read=GetVector2, write=SetVector2};
	__property System::StaticArray<TScalar, 3> Vector3 = {read=GetVector3, write=SetVector3};
	__property System::StaticArray<TScalar, 4> Vector4 = {read=GetVector4, write=SetVector4};
public:
	/* TObject.Create */ inline __fastcall GCUDAHostElementAccess__1() : System::TObject() { }
	/* TObject.Destroy */ inline __fastcall virtual ~GCUDAHostElementAccess__1() { }
	
};

#pragma pack(pop)

typedef GCUDAHostElementAccess__1<System::Byte> UByteElement;

typedef GCUDAHostElementAccess__1<System::Int8> ByteElement;

typedef GCUDAHostElementAccess__1<System::Word> UShortElement;

typedef GCUDAHostElementAccess__1<short> ShortElement;

typedef GCUDAHostElementAccess__1<System::LongWord> UIntElement;

typedef GCUDAHostElementAccess__1<System::LongInt> IntElement;

typedef GCUDAHostElementAccess__1<THalfFloat> HalfElement;

typedef GCUDAHostElementAccess__1<float> FloatElement;

typedef GCUDAHostElementAccess__1<double> DoubleElement;

//-- var, const, procedure ---------------------------------------------------
extern DELPHI_PACKAGE System::PByte __fastcall GetElementAccessAddress(void);
extern DELPHI_PACKAGE unsigned __fastcall GetElementAccessSize(void);
extern DELPHI_PACKAGE void __fastcall SetElementAccessAddress(System::PByte AValue, unsigned ASize);
}	/* namespace Dataaccess */
}	/* namespace Cuda */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_CUDA_DATAACCESS)
using namespace Cuda::Dataaccess;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_CUDA)
using namespace Cuda;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// CUDA_DataAccessHPP
